Q. object, arrays & strings in built methods ?

-------------------------------------------------------------------------------------------------------------------------------------
Q. strings -> interpolation vs template literal, Immutability, methods ?

-------------------------------------------------------------------------------------------------------------------------------------
Q. object, arrays & strings in built methods ?

-------------------------------------------------------------------------------------------------------------------------------------
Q. How manys ways to create Objects ?

-------------------------------------------------------------------------------------------------------------------------------------
Q. set vs map Objects ?

-------------------------------------------------------------------------------------------------------------------------------------
Q. How add, delete, modify properties ?

-------------------------------------------------------------------------------------------------------------------------------------
Q. common methods to iterate over properties of object ?

-------------------------------------------------------------------------------------------------------------------------------------
Q. confirm property exist or not in object ?

-------------------------------------------------------------------------------------------------------------------------------------
Q. dot notation vs bracket notation ?

-------------------------------------------------------------------------------------------------------------------------------------
Q. how to select, modify, create, remove DOM ?

-------------------------------------------------------------------------------------------------------------------------------------
Q. HTML vs/& DOM ?

-------------------------------------------------------------------------------------------------------------------------------------
Q. DOM VS virtual DOM ?

-------------------------------------------------------------------------------------------------------------------------------------
ü§î InnerHTML vs InnerText ?

üÖ∞Ô∏è  innerHTML and innerText are used to get or set content inside an element. 
    innerHTML allows us to work with HTML tags and render them, whereas innerText only deals with plain text and does not parse HTML.
    A major edge case is security: using innerHTML with untrusted input can lead to XSS attacks.
    Another consideration is performance‚ÄîinnerText triggers reflow (causing layout re calculation)

     ‚úÖ<div id="example">
            <b>Hello</b> World!
        </div>

        let div = document.getElementById("example");
        console.log(div.innerHTML); // "<b>Hello</b> World!" (Includes HTML tags)
        console.log(div.innerText); // "Hello World!" (Only visible text)


    ‚úÖ document.getElementById("demo").innerHTML = "<h1>New Content</h1>";
          Result in Browser:
            üñ• New Content (Rendered as an <h1> tag)

        document.getElementById("demo").innerText = "<h1>New Content</h1>";
            Result in Browser:
            üñ• <h1>New Content</h1> (Displayed as plain text)
-------------------------------------------------------------------------------------------------------------------------------------
ü§î local storage vs session storage ?

üÖ∞Ô∏è Local Storage and Session Storage are both used for storing key-value pairs in the browser,
    but they differ in scope and lifespan. Local Storage retains data indefinitely, even after the browser is closed,
    while Session Storage only persists as long as the tab is open. Both have a 5MB limit and are restricted to the same domain. 
    A key edge case is that they are synchronous and may impact performance when handling large amounts of data. 
    If you frequently access large data from local storage, it may slow down page performance.

    Visualizing Data Persistence
    üìå Local Storage (Persistent Data)
    [Open Tab] ‚Üí Save Data ‚Üí [Close Tab] ‚Üí [Reopen] ‚úÖ Data is still available

    üìå Session Storage (Temporary Data)
    [Open Tab] ‚Üí Save Data ‚Üí [Close Tab] ‚ùå Data is lost

-------------------------------------------------------------------------------------------------------------------------------------
Q. Debouncing ?

-------------------------------------------------------------------------------------------------------------------------------------
Q. Throttling ?

-------------------------------------------------------------------------------------------------------------------------------------
Q. Recursion ?

-------------------------------------------------------------------------------------------------------------------------------------
Q. events objects, bubbling,  capturing/trickling, delegation, propogation ?

-------------------------------------------------------------------------------------------------------------------------------------
Q. event loop in js browser and event loop in nodejs ?

-------------------------------------------------------------------------------------------------------------------------------------