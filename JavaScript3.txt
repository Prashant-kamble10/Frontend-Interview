ü§î object, arrays & strings in built methods ?

üÖ∞Ô∏è  https://overapi.com/javascript
    üìå Array Methods
            concat()
            indexOf()
            join()
            lastIndexOf()
            pop()
            push()
            reverse()
            shift()
            slice()
            sort()
            splice()
            toString()
            unshift()
            valueOf()
    üìå  Array Properties
            constructor
            length
            prototype

    üìå String Methods
            charAt()
            charCodeAt()
            concat()
            fromCharCode()
            indexOf()
            lastIndexOf()
            match()
            replace()
            search()
            slice()
            split()
            substr()
            substring()
            toLowerCase()
            toUpperCase()
            valueOf()
    üìå String Properties
            constructor
            length
            prototype

    üìå Date Methods
            getDate()
            getDay()
            getFullYear()
            getHours()
            getMilliseconds()
            getMinutes()
            getMonth()
            getSeconds()
            getTime()
            setDate()
            setFullYear()
            setHours()
            setMilliseconds()
            setMinutes()
            setMonth()
            setSeconds()
            setTime()
    
    üìå DOM events
             click
             change
             onSubmit
             addEventListener()

-------------------------------------------------------------------------------------------------------------------------------------
ü§î strings -> interpolation vs template literal, Immutability, methods ?

üÖ∞Ô∏è  ‚úÖ Template Literals (introduced in ES6)
            const name = "Alice";
            const age = 25;

            const intro = `My name is ${name} and I am ${age} years old.`;
        
    ‚úÖ Traditional Interpolation (Manual Concatenation)
            const intro = "My name is " + name + " and I am " + age + " years old.";

    üîí String Immutability
            let str = "Hello";
            str[0] = "h";   // ‚ùå Won‚Äôt change anything
            console.log(str); // "Hello"

            In JavaScript, strings are immutable.
            Any operation that "changes" a string actually returns a new string, leaving the original unchanged.
-------------------------------------------------------------------------------------------------------------------------------------
ü§î How manys ways to create Objects ?

üÖ∞Ô∏è ‚úÖ Ways to Create Objects in JavaScript
        1. Object Literal Syntax
             const obj = { name: 'Alice', age: 25 };

             Use When - For simple one-off objects

        2. Using new Object()
            const obj = new Object();
            obj.name = 'Alice';

            Use when - Rarely used, not recommended

        3. Constructor Function 
            function Person(name, age) {
                    this.name = name;
                    this.age = age;
                }
                const p1 = new Person('Alice', 25);

             Use when - Before ES6; still used but less often

        4. ES6 Class Syntax 
            class Person {
                constructor(name, age) {
                    this.name = name;
                    this.age = age;
                 }
                }
                const p1 = new Person('Alice', 25);

             Use when -  When you need reusable blueprints / OOP structure

        5. Object.create()
            const proto = { greet() { console.log('Hi'); } };
                const obj = Object.create(proto);
                obj.name = 'Alice';

                Use when - When you want to set prototype manually

        6. Factory Function
                function createPerson(name, age) {
                    return { name, age };
                    }
                const p1 = createPerson('Alice', 25);

               Use when - When you want reusable object creation without new keyword

        7. Using JSON
                const jsonStr = '{"name":"Alice","age":25}';
                const obj = JSON.parse(jsonStr);

                Use when - When parsing data, especially from APIs or localStorage

        üß† Pro Tip:
            If you‚Äôre building many similar objects, go for Factory Functions or Classes.
            If it‚Äôs one-time config-style data, object literals are perfect.

-------------------------------------------------------------------------------------------------------------------------------------
ü§î set vs map Objects ?

üÖ∞Ô∏è Set and Map are both ES6 additions in JavaScript that provide more powerful alternatives to plain objects when managing collections of data.
      |  Feature       |	Set	                                     |   Map
      |  Stores	      |  Unique values only	                         |   Key-value pairs
      |  Keys	      |  Values themselves act as keys	             |   Any value (objects, functions, primitives) as keys
      |  Order	      |  Maintains insertion order	                 |   Maintains insertion order
      |  Duplicates	  |  Not allowed	Keys must be unique,         |   values can repeat
      |  Use case	  |  Tracking unique items	                     |   Associating data with unique keys

      üîπ Set Example
           const mySet = new Set();
            mySet.add(1);
            mySet.add(2);
            mySet.add(2); // Won't be added again

            console.log(mySet); // Set(2) {1, 2}
            console.log(mySet.has(1)); // true
            mySet.delete(1);
            console.log(mySet); // Set(1) {2}

       üî∏ Map Example
            const myMap = new Map();
            myMap.set('name', 'Alice');
            myMap.set('age', 25);
            myMap.set({ id: 1 }, 'Object as key');

            console.log(myMap);  //  Map(3) { 'name' => 'Alice', 'age' => 25, { id: 1 } => 'Object as key' }
            console.log(myMap.get('name')); // Alice
            console.log(myMap.has('age')); // true
-------------------------------------------------------------------------------------------------------------------------------------
ü§î How add, delete, modify properties in Object ?

üÖ∞Ô∏è üîπ Add Property
         const obj = {};
        obj.name = "Alice";          // Dot notation
        obj["age"] = 25;             // Bracket notation

    üî∏ Modify Property
          obj.name = "Bob";           // Just reassign it

    ‚ùå Delete Property
            delete obj.age;             // Removes the "age" property

-------------------------------------------------------------------------------------------------------------------------------------
ü§î How add, delete, modify elements in array ?

üÖ∞Ô∏è  üîπ Add Elements
            const arr = [1, 2];

            // At the end
            arr.push(3);        // [1, 2, 3]

            // At the beginning
            arr.unshift(0);     // [0, 1, 2, 3]

            // At a specific index
            arr.splice(2, 0, 1.5); // insert 1.5 at index 2 => [0, 1, 1.5, 2, 3]

    üî∏ Modify Elements
            arr[1] = 10;       // Changes value at index 1

    ‚ùå Delete Elements
            arr.pop();         // Removes from end
            arr.shift();       // Removes from start
            arr.splice(1, 1);   // Removes 1 element at index 1

            // Caution: delete leaves undefined hole
            delete arr[1];     // Don't use this unless you know what you're doing

-------------------------------------------------------------------------------------------------------------------------------------
ü§î common methods to iterate over properties of object ?

üÖ∞Ô∏è  1. for...in loop - ‚úÖ Iterates over all enumerable properties, including inherited ones (use hasOwnProperty() to filter).
    2. Object.keys() - ‚úÖ Iterates only own enumerable property names (no prototype keys)
            Object.keys(obj).forEach(key => {
                    console.log(key, obj[key]);
                });

    3. Object.values() - ‚úÖ Use when you're only interested in values.
            Object.values(obj).forEach(value => {
                     console.log(value);
                });

    4. Object.entries() - ‚úÖ Useful when you want both key and value directly.
            Object.entries(obj).forEach(([key, value]) => {
                    console.log(key, value);
                });
-------------------------------------------------------------------------------------------------------------------------------------
ü§î common methods to iterate over elements of array ?

üÖ∞Ô∏è 1. for loop
    2. for...of loop
    3. forEach() loop
    4. map()
    4. filter()
    5. reduce()

    üîß Methods That Mutate the Original Array
            
            push()	Adds to end
            pop()	Removes from end
            shift()	Removes from start
            unshift()	Adds to start
            splice()	Add/remove elements at any index
            sort()	Sorts original array
            reverse()	Reverses in-place
            fill()	Overwrites values

    ‚úÖ Methods That Return a New Array (Non-mutating)
            
            map()	Transforms elements
            filter()	Filters based on condition
            slice()	Returns a portion
            concat()	Merges arrays
            flat()	Flattens nested arrays
            toSorted() (ES2023)	Sorted copy
            toReversed() (ES2023)	Reversed copy
            toSpliced() (ES2023)	Spliced copy
            reduce()          Reduces to a single value (can also build new arrays/objects)
-------------------------------------------------------------------------------------------------------------------------------------
ü§î confirm property exist or not in object ?

üÖ∞Ô∏è 1. in Operator
      const obj = { name: "Alice", age: 25 };

        console.log("name" in obj);  // ‚úÖ true
        console.log("salary" in obj); // ‚ùå false

    2. hasOwnProperty()
         obj.hasOwnProperty("age");       // ‚úÖ true
         obj.hasOwnProperty("toString");  // ‚ùå false 
-------------------------------------------------------------------------------------------------------------------------------------
ü§î confirm elements exist or not in array ?

üÖ∞Ô∏è 1. includes() 
            const arr = [1, 2, 3, 4];

            console.log(arr.includes(3)); // ‚úÖ true
            console.log(arr.includes(5)); // ‚ùå false

    2. some() - ‚úÖ Great for arrays of objects ‚Äî you can check by condition.
            const users = [{ id: 1 }, { id: 2 }];

            const hasUser = users.some(user => user.id === 2); // ‚úÖ true
-------------------------------------------------------------------------------------------------------------------------------------
ü§î dot notation vs bracket notation ?

üÖ∞Ô∏è  Already done.
-------------------------------------------------------------------------------------------------------------------------------------
ü§î how to select, modify, create, remove DOM ?

üÖ∞Ô∏è 1. Select Elements
        // By ID
        document.getElementById("title");

        // By class name
        document.getElementsByClassName("item");

        // By tag name
        document.getElementsByTagName("p");

        // Using CSS selectors (recommended)
        document.querySelector(".item");          // first match
        document.querySelectorAll(".item");       // all matches

    2. Modify Elements
         const title = document.getElementById("title");

        // Change text
        title.innerText = "Hello, World!";

        // Change HTML
        title.innerHTML = "<em>Welcome!</em>";

        // Change style
        title.style.color = "blue";

        // Change attribute
        title.setAttribute("class", "highlight");

        // Add a class
        title.classList.add("active");

        // Remove a class
        title.classList.remove("inactive");

    3. Create Elements
        const newDiv = document.createElement("div");
        newDiv.innerText = "I‚Äôm a new div!";
        newDiv.className = "new-class";

        // Add it to the page
        document.body.appendChild(newDiv);

    4. Remove Elements
        const element = document.getElementById("to-remove");

        // Method 1: remove directly
        element.remove();

        // Method 2: remove via parent
        element.parentNode.removeChild(element);

    ‚úÖ Pro Tip (for Interviews)
    Use querySelector and querySelectorAll for most modern use cases ‚Äî they support CSS-like selectors and are more flexible.
-------------------------------------------------------------------------------------------------------------------------------------
ü§î HTML vs/& DOM ?

üÖ∞Ô∏è  üìå HTML (HyperText Markup Language)
    Definition: Standard markup language used to create and structure content on the web.
    Purpose: Defines the structure and layout of a web page using elements and tags.
    Not a programming language, but a markup language.

    üìå DOM (Document Object Model)
    Definition: A programming interface for HTML and XML documents.
    Represents the page as a tree-like structure (node tree).
    Each HTML element is a node in the DOM tree.
    Allows scripts (JavaScript) to read, access, and manipulate:
    Structure (add/remove elements)
    Content (text, attributes)
    Style (via CSS properties)
    Dynamic behavior of websites relies on DOM manipulation.

    Example: document.getElementById("myDiv").innerText = "Hello!";

    üìå Relationship Between HTML & DOM
    HTML is the code written by developers.
    DOM is the browser‚Äôs in-memory representation of that HTML.
    When a browser loads an HTML file, it parses it and creates a DOM.
    Any change in the DOM (via JS) reflects immediately on the page.

    üè† House Analogy
    HTML is like the blueprint of a house. It defines what rooms exist (kitchen, bedroom),
    where they are placed, and what goes inside (furniture, doors, windows).
    It‚Äôs static and just a design.
    DOM is like the actual constructed house based on that blueprint.
    It's what the browser builds in memory from the HTML code.
    You can walk into the house (DOM), move furniture around, paint walls, or even add/remove rooms ‚Äî all in real-time using JavaScript.
    
-------------------------------------------------------------------------------------------------------------------------------------
ü§î DOM VS virtual DOM ?

üÖ∞Ô∏è DOM (Document Object Model)
    Definition: A programming interface for HTML and XML documents.
    Represents the web page as a tree-like structure (nodes/elements).
    Allows developers to access and manipulate HTML content, structure, and style using JavaScript.

    Problem:
    Real DOM is slow when it comes to frequent or complex updates.
    Updating even a small part of the UI causes the entire DOM to re-render, leading to performance issues.

    Virtual DOM (VDOM)
    Definition: A lightweight copy of the real DOM kept in memory.
    Introduced by libraries like React to optimize UI rendering.
    Any changes in the UI are first reflected in the Virtual DOM, not the real DOM.
    React then compares the new VDOM with the previous one using a process called diffing.
    It then applies the minimal set of changes to the actual DOM (called reconciliation).

    Analogy ‚Äì Book Editing
    Real DOM: Editing a book by rewriting the entire book every time a sentence changes.
    Virtual DOM: Using a draft copy, marking the changes, and only updating the changed sentence in the final book.

    
    Why Virtual DOM is Useful (Especially in React)
    Improves performance and efficiency.
    Enables reactive programming ‚Äì UI auto-updates when data changes.
    Keeps code declarative and easier to manage.

-------------------------------------------------------------------------------------------------------------------------------------
ü§î InnerHTML vs InnerText ?

üÖ∞Ô∏è  innerHTML and innerText are used to get or set content inside an element. 
    innerHTML allows us to work with HTML tags and render them, whereas innerText only deals with plain text and does not parse HTML.
    A major edge case is security: using innerHTML with untrusted input can lead to XSS attacks.
    Another consideration is performance‚ÄîinnerText triggers reflow (causing layout re calculation)

     ‚úÖ<div id="example">
            <b>Hello</b> World!
        </div>

        let div = document.getElementById("example");
        console.log(div.innerHTML); // "<b>Hello</b> World!" (Includes HTML tags)
        console.log(div.innerText); // "Hello World!" (Only visible text)


    ‚úÖ document.getElementById("demo").innerHTML = "<h1>New Content</h1>";
          Result in Browser:
            üñ• New Content (Rendered as an <h1> tag)

        document.getElementById("demo").innerText = "<h1>New Content</h1>";
            Result in Browser:
            üñ• <h1>New Content</h1> (Displayed as plain text)
-------------------------------------------------------------------------------------------------------------------------------------
ü§î local storage vs session storage ?

üÖ∞Ô∏è Local Storage and Session Storage are both used for storing key-value pairs in the browser,
    but they differ in scope and lifespan. Local Storage retains data indefinitely, even after the browser is closed,
    while Session Storage only persists as long as the tab is open. Both have a 5MB limit and are restricted to the same domain. 
    A key edge case is that they are synchronous and may impact performance when handling large amounts of data. 
    If you frequently access large data from local storage, it may slow down page performance.

    Visualizing Data Persistence
    üìå Local Storage (Persistent Data)
    [Open Tab] ‚Üí Save Data ‚Üí [Close Tab] ‚Üí [Reopen] ‚úÖ Data is still available

    üìå Session Storage (Temporary Data)
    [Open Tab] ‚Üí Save Data ‚Üí [Close Tab] ‚ùå Data is lost

-------------------------------------------------------------------------------------------------------------------------------------
ü§î Debouncing ?

üÖ∞Ô∏è Debouncing is a programming pattern used to limit the rate at which a function gets executed. 
    It ensures that a function is only called after a certain period of inactivity,
     even if it's triggered multiple times in quick succession.
     It waits for a pause in action before executing the function.

     It‚Äôs especially useful for performance optimization in cases where events fire rapidly, like:
        resize events
        scroll events
        keyup/input events in a search bar
        Mouse movements

    <input type="text" id="searchInput" placeholder="Search..." />

    <script>

      function debounce(fn, delay) {
        let timer;
        return function (value) {
          clearTimeout(timer);
          timer = setTimeout(() => fn(value), delay);
        };
      }

      function search(query) {
        console.log("Searching for:", query);
      }

      const debouncedSearch = debounce(search, 500);

      document.getElementById("searchInput").addEventListener("input", (e) => {
        debouncedSearch(e.target.value);
      });

    </script>


-------------------------------------------------------------------------------------------------------------------------------------
ü§î Throttling ?

üÖ∞Ô∏è  Throttling is a technique used to limit how often a function is executed.
    Even if an event (like scroll or resize) keeps firing rapidly, throttling makes sure the function runs only once every X milliseconds.

    Imagine we have a button that performs an action when clicked,
     but we want to prevent it from firing too often, like only once every 5 seconds.

        <button id="clickBtn">Click Me</button>

    <script>

      function throttle(func, delay) {
        let canRun = true;

        return function () {
          if (canRun) {
            func(); // Run the function
            canRun = false; // Block further calls

            setTimeout(() => {
              canRun = true; // Allow it again after the delay
            }, delay);
          }
        };
      }

      function handleClick() {
        console.log("Button clicked at", new Date().toLocaleTimeString());
      }

      const throttledClick = throttle(handleClick, 5000); // 2 seconds

      document
        .getElementById("clickBtn")
        .addEventListener("click", throttledClick);
        
    </script>
-------------------------------------------------------------------------------------------------------------------------------------
ü§î Recursion ?

üÖ∞Ô∏è üß† Thumb Rules for Recursion in JavaScript

    1. Identify the base case 
         This is the condition where the recursion stops. Without it, you‚Äôll get an infinite loop (or stack overflow).
    2. Identify the recursive case 
         This is where the function calls itself with a smaller/simpler version of the input.
    3. Think in terms of smaller subproblems
         Break down the problem: ‚ÄúCan I solve a smaller version of this, and build up the full answer from that?‚Äù
    4. Trust the recursion (Don‚Äôt try to trace it fully)
         When writing recursive code, assume the recursive call works as expected, and build logic around that.
    5. Dry run with a small input
         Pick a small value like n = 3, and write down what happens at each step. This helps visualize how the function behaves.
    6. Avoid unnecessary calculations
         Sometimes you solve the same subproblem multiple times. That‚Äôs where memoization or dynamic programming can help.
    7. Use helper functions for extra variables
         If you need to track multiple values (like index, path, etc.), write an inner helper function inside your main function.

    üîÅ Template You Can Follow for Recursion

            function recurse(input) {
                // Base case
                if (/* base condition */) {
                    return /* base result */;
                }

                // Recursive case
                let result = recurse(smallerInput);

                // Do something with result
                return finalResult;
            }

            üëá Example: Factorial
                    function factorial(n) {
                        if (n === 0) return 1; // Base case
                        return n * factorial(n - 1); // Recursive case
                    }

        ‚úÖ Beginner-Friendly Recursion Questions
                Factorial of a number, Input: 5 ‚Üí Output: 120
                
                Fibonacci Sequence, Input: 5 ‚Üí Output: 5 (0, 1, 1, 2, 3, 5)

                Sum of digits, Input: 1234 ‚Üí Output: 10 (1+2+3+4)                

                Reverse a string,  Input: "hello" ‚Üí Output: "olleh"               

                Check if a string is a palindrome, Input: "racecar" ‚Üí Output: true

        üü° Intermediate Recursion Questions
                Print all numbers from N to 1, Example: 5 ‚Üí 5, 4, 3, 2, 1

                Print all numbers from 1 to N, Example: 5 ‚Üí 1, 2, 3, 4, 5

                Calculate power of a number, Input: pow(2, 3) ‚Üí Output: 8

                Binary Search (Recursive), Input: Sorted array + target

                Check if array is sorted (recursive), Input: [1, 2, 3, 4] ‚Üí Output: true


        üî¥ Advanced Recursion + Backtracking
                Generate all subsets (Power Set), Input: [1, 2] ‚Üí Output: [[], [1], [2], [1,2]]

                Generate all permutations of a string/array, Input: "abc" ‚Üí Output: "abc", "acb", "bac", "bca", "cab", "cba"

                N-th Tribonacci Number, Similar to Fibonacci but with 3 previous numbers.

                Tower of Hanoi, Classic problem for understanding recursive strategy.

                Maze Path / Rat in a Maze, Count number of paths or print all possible ways from (0,0) to (N-1,N-1)

                Generate Parentheses, Input: n = 3 ‚Üí Output: all combinations of well-formed parentheses.

                Word Break Problem, Given a string and a dictionary, return if the string can be segmented into words.

                Flatten a Nested Array, Input: [1, [2, [3, 4]], 5] ‚Üí Output: [1, 2, 3, 4, 5]

        üß™ Bonus: Recursion + Memoization (Dynamic Programming flavor)
                Climbing Stairs, Number of ways to reach the top of stairs taking 1 or 2 steps.

                Maximum sum of non-adjacent elements, Think: House Robber problem



-------------------------------------------------------------------------------------------------------------------------------------
ü§î  event-related concepts or mechanisms -> bubbling,  capturing/trickling, delegation, propogation ?

üÖ∞Ô∏è  ‚úÖ Event propogation

        Event Propagation is the process that defines how events move through the DOM tree when an event occurs on a nested element
        (like clicking a button inside a div). The overall process of how events move in DOM (includes capturing & bubbling).

        It happens in three phases:
         1. Capturing Phase (Trickling Down)
            The event travels from the root (<html>) down to the target element.
            This phase is not active by default unless specified using { capture: true }.

        2. Target Phase
            The event reaches the target element ‚Äî the element that was actually clicked or interacted with.
            The event listeners on the target element are called here.

        3. Bubbling Phase (Bubbling Up)
            After reaching the target, the event bubbles up from the target to the root, calling any event handlers along the way.
            This is the default phase used in most event listeners.

    ‚úÖ Event bubbling

        Event Bubbling is a concept in the DOM (Document Object Model) 
        where an event triggered on a child element bubbles up (i.e., moves up) through its parent elements.
        It means the event is first handled by the target element, 
        and then it automatically triggers the same event on its parent, grandparent, and so on ‚Äî unless stopped.

        üìò Real-World Analogy
        Imagine you tap a small button (child) inside a box (parent) ‚Äî the action starts at the button and bubbles up to the box.

            <div id="parent" style="padding: 20px; background-color: lightblue">
            Parent
            <button id="child" style="margin: 10px">Click Me</button>
            </div>

            <script>

            document.getElementById("parent").addEventListener("click", function () {
                console.log("Parent clicked");
            });

            document.getElementById("child").addEventListener("click", function () {
                console.log("Child button clicked");
            });
            
            </script>

        üß† What Happens When You Click the Button?
             Console Output: Child button clicked
                                Parent clicked

         Why?
            You clicked the child button, so its handler runs first.
            Then the event bubbles up and triggers the parent's click handler too.      

        Key Points to Mention:
            Bubbling is the default behavior in js for most DOM events.
            Event goes from the target (child) to ancestors (parents).
            You can stop bubbling using event.stopPropagation() if needed.                 

        ‚úã Bonus: Stopping the Bubbling

            document.getElementById("child").addEventListener("click", function (event) {
                console.log("Child button clicked");
                event.stopPropagation(); // Stops the event from reaching parent
                });

    ‚úÖ Event Capturing/Trickling

            Event Capturing (also called trickling) is a phase in the DOM event flow where the event 
            starts from the topmost parent (like <body> or <html>) and travels down to the target element (child).
            This happens before the bubbling phase, but it only works if the event listener is set with { capture: true }.

            üìò Real-World Analogy
            Imagine pouring water on a tree ‚Äî the water trickles down from the top branches (parent) to the leaves (child).

                <div id="parent" style="padding: 20px; background-color: lightblue">
                    Parent
                    <button id="child" style="margin: 10px">Click Me</button>
                    </div>

                    <script>

                    document.getElementById("parent").addEventListener(
                        "click",
                        function () {
                        console.log("Parent clicked (capturing phase)");
                        },
                        true // üëà This enables capturing!
                    );

                    document.getElementById("child").addEventListener("click", function () {
                        console.log("Child button clicked");
                    });
                    
                    </script>

            üß† What Happens When You Click the Button?
                Console Output: Parent clicked (capturing phase)
                                    Child button clicked

            Why?
                The event first goes down to the child (capturing).
                The parent handler runs first because we used { capture: true }.
                Then the child handler runs.

            Key Points to Mention:
                Capturing phase	    Event goes top to bottom (parent ‚Üí child)
                Default behavior	JavaScript uses bubbling by default. Capturing must be enabled manually.
                Use case	        Useful when you want to catch the event before it reaches the target.

            ‚úã Bonus Tip: You Can Stop the Event in Capturing Too!

                 document.getElementById("parent").addEventListener(
                    "click",
                    function (event) {
                        console.log("Parent clicked (capturing)");
                        event.stopPropagation(); // Stops event from reaching child
                    },
                    true
                    );

    ‚úÖ Event delegation
            Event Delegation is a technique where you attach a single event listener to a parent element, 
            and it handles events for current and future child elements by using event bubbling.
            Instead of adding event listeners to each child individually, you "delegate" the responsibility to the parent.

            üìò Why Use Event Delegation?
                üßº Cleaner code ‚Äì fewer event listeners
                üöÄ Better performance ‚Äì especially with many child elements
                üß© Dynamic elements ‚Äì handles new elements added later

                     <ul id="itemList">
                        <li>Item 1</li>
                        <li>Item 2</li>
                        <li>Item 3</li>
                     </ul>

                    <script>

                        document
                            .getElementById("itemList")
                            .addEventListener("click", function (event) {
                            // Check if a <li> was clicked
                            if (event.target.tagName === "LI") {
                                console.log("You clicked:", event.target.textContent);
                            }
                            });
                            
                    </script>

                    console Output : You clicked: Item 3
                                     You clicked: Item 1
                                     You clicked: Item 2
                
            üß† What‚Äôs Happening Here?
                We add one listener to <ul> (the parent).
                When any <li> is clicked, the event bubbles up to <ul>.
                We check event.target to know which child was clicked.

            Key Points to Mention :
                Event Delegation	Parent handles events for child elements using bubbling
                Efficient	        Reduces number of event listeners
                Dynamic	            Works for elements added later too

            ‚úã Bonus: Dynamic Elements Example
                You can even add new <li> items later, and the same event listener will still work ‚Äî no need to attach a new one!

                const newItem = document.createElement("li");
                newItem.textContent = "Item 4";
                document.getElementById("itemList").appendChild(newItem);

-------------------------------------------------------------------------------------------------------------------------------------
ü§î  Example of an Actual Event Object ?

üÖ∞Ô∏è  element.addEventListener("click", function(event) {
        console.log(event.type); // 'click' ‚Üê this 'event' is the Event object
        });
-------------------------------------------------------------------------------------------------------------------------------------
ü§î event loop in js browser and event loop in nodejs ?

üÖ∞Ô∏è Do it from book
-------------------------------------------------------------------------------------------------------------------------------------