ü§î array0 - Remove Duplicates 
Problem Statement:
Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element 
appears only once. The relative order of the elements should be kept the same. Then return the number of unique elements in nums.

üÖ∞Ô∏è        let nums = [0,0,1,1,1,2,2,3,3,4]

        function sample(a){
            let x = 0;
            for(let i=0; i < a.length; i++){
                if(a[i] > a[x]){
                    x = x + 1;
                    a[x] = a[i]
                }
            }
            return x + 1;
        
        }

        console.log(sample(nums))  // 5
        console.log(nums)   // [  0, 1, 2, 3, 4, 2, 2, 3, 3, 4]


üß† Easy Way to Remember 2 pointer
Think of two people running toward each other (or one chasing another) on a track:
They meet when a condition is satisfied.
They change speed/direction depending on what they see (like the array values).
--------------------------------------------------------------------------------------------------------------------------------------
ü§î array0 - Remove Element.
Problem Statement:
Given an integer array nums and an integer val, remove all occurrences of val in-place. The order of the elements may be changed. 
Then return the number of elements in nums which are not equal to val.

üÖ∞Ô∏è      let nums = [8,5,2,7,5,4,1,1,7,9,5]
        let val = 5
        function sample(a, b){
            let x = 0;
            for(let i=0; i < a.length; i++){
                if(a[i] != b){
                    a[x] = a[i]
                    x = x + 1
                }
            }
            return x 
        }

        console.log(sample(nums, val))  // 8
        console.log(nums)   // [ 8, 2, 7, 4, 1, 1, 7, 9, 7, 9, 5]
--------------------------------------------------------------------------------------------------------------------------------------
ü§î array0 - reverse string
Problem Statement:
Write a function that reverses a string. The input string is given as an array of characters s. 
You must do this by modifying the input array in-place with O(1)extra memory.

üÖ∞Ô∏è // my approach

let arr = [ "c", "l", "u", "b"]

function sample(a){
    let reverseArr = []
    for(let i = 0; i < a.length ; i++){
        reverseArr[i] = a[a.length - 1 - i]
    }
   return reverseArr    // [ 'b', 'u', 'l', 'c' ]
}

console.log(sample(arr))

// Akshay saini approach

let arr = [ "c", "l", "u", "b"]

function sample(a){
    let len = a.length
    let halfLen = Math.floor(len/2)
    for(let i = 0; i < halfLen ; i++){
        let temp = a[i]
        a[i] = a[len-1-i]
        a[len-1-i] = temp
    }
  return a
}

console.log(sample(arr))

// Another approach

let arr = [ "c", "l", "u", "b"]

function sample(a){
    let left = 0;
    let right = a.length-1;
    
    while(left < right){
        [a[left], a[right]] = [a[right], a[left]]
        left++;
        right--;
    }
  return a
}

console.log(sample(arr))
--------------------------------------------------------------------------------------------------------------------------------------
ü§î Best Time to Buy and Sell Stock I
Problem Statement:
You are given an array prices where prices[i] is the price of a given stock on the ith day.
You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.
Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

üÖ∞Ô∏è 
 let arr = [7,5,3,6,1,4,8]
 
 function sample(a){
     let min = a[0];
     let maxProfit = 0
     
     for(let i=0; i < a.length; i++){
         if(a[i] < min){
             min = a[i]
         }
         if(a[i] - min > maxProfit){
             maxProfit = a[i]-min
         }
     }
     return maxProfit    // 7
 }
 
 console.log(sample(arr))
--------------------------------------------------------------------------------------------------------------------------------------
ü§î Merge Sorted Array
problem Statement:
You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, 
representing the number of elements in nums1 and nums2 respectively.
Merge nums1 and nums2 into a single array sorted in non-decreasing order.
The final sorted array should not be returned by the function, but instead be stored inside the array nums1. 
To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, 
and the last n elements are set to 0 and should be ignored. nums2 has a length of n.

üÖ∞Ô∏è // approach 1

    let num1 = [1, 2, 3, 0, 0, 0]
    let m = 3
    let num2 = [2, 5, 6]
    let n = 3

    // o/p, num1 = [1,2,2,3,5,6]

    num1 = num1 + num2
    num1 = [1,2,3,2,5,6]
    then
        num1.sort   // [1,2,2,3,5,6]

    //  approach 2

    function sample(num1, num2, m, n) {
        let n1Copy = num1.slice(0, m);
        let p1 = 0;
        let p2 = 0;

        for (let i = 0; i < m + n; i++){
            if (p2 >= n || (p1 < m && n1Copy[p1] < num2[p2])) {
                num1[i] = n1Copy[p1]
                p1++;
            } else {
                num1[i] = num2[p2]
                p2++;
            }
        }
        return num1
    }

    console.log(sample(num1, num2, m, n))

    // approach 3

    function sample(num1, num2, m, n) {

        let p1 = m - 1;
        let p2 = n - 1;
        
        for (let i = m + n - 1; i > 0; i--){
            if (p2 < 0) break;
            if (p1 >= 0  && num1[p1] > num2[p2]) {
                num1[i] = num1[p1]
                p1--;
            } else {
                num1[i] = num2[p2]
                p2--;
            }
        }
        return num1
    }

    console.log(sample(num1, num2, m, n))
--------------------------------------------------------------------------------------------------------------------------------------
ü§î Move zeroes
problem Statement: Given an integer array nums, move all 0‚Äôs to the end of it while maintaining the relative order of the non-zero elements.
Note: You must do this in-place without making a copy of the array.

Example 1:
Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]

üÖ∞Ô∏è   let moveZeroes = function(nums) {
      let x = 0;
      for (let i = 0; i < nums.length; i++) {
          if (nums[i] !== 0) {
              nums[x] = nums[i];
              x++;
          }
      }
      for (let i = x; i < nums.length; i++) {
          nums[i] = 0;
      }
    };
      
--------------------------------------------------------------------------------------------------------------------------------------
ü§î Max Consecutive Ones
problem Statement: Given a binary array nums, return the maximum number of consecutive 1‚Äôs in the array.

Example 1:
Input: nums = [1,1,0,1,1,1]
    Output: 3
    Explanation: The first two digits or the last three digits are consecutive 1s. 
    The maximum number of consecutive 1s is 3.

üÖ∞Ô∏è  let findMaxConsecutiveOnes = function(nums) {
        let currentCount = 0;
        let maxCount = 0;
        for (let i = 0; i < nums.length; i++) {
        if (nums[i] == 1) {
            currentCount++;
        } else {
            maxCount = Math.max(currentCount, maxCount);
            currentCount = 0;
        }
        }
        return Math.max(maxCount, currentCount);
    };
--------------------------------------------------------------------------------------------------------------------------------------
ü§î Missing Number
problem Statement: Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.
Example 1:
Input: nums = [3,0,1]
Output: 2
Explanation:
n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 
2 is the missing number in the range since it does not appear in nums.

Example 2:
Input: nums = [9,6,4,2,3,5,7,0,1]
Output: 8
Explanation:
n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 
8 is the missing number in the range since it does not appear in nums.

üÖ∞Ô∏è  // brute force approach

    let missingNumber = function(nums) {
      nums.sort((a, b) => a - b);
  
      if (nums[0] !== 0) return 0;
  
      for (let i = 1; i < nums.length; i++) {
          if (nums[i] !== nums[i - 1] + 1) {
              return nums[i - 1] + 1;
          }
      }
  
      return nums.length;
    };

    // optimized approach

    let missingNumber = function(nums) {
      let n = nums.length;
      let total_sum = (n * (n + 1)) / 2;
      let sum_of_array = 0;
  
      for (let num of nums) {
          sum_of_array += num;
      }
  
      return total_sum - sum_of_array;
     };
--------------------------------------------------------------------------------------------------------------------------------------
ü§î Single Number
problem Statement: Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.
You must implement a solution with a linear runtime complexity and use only constant extra space.

Examples
Input: nums = [2, 2, 1] ‚Üí Output: 1
Input: nums = [4, 1, 2, 1, 2] ‚Üí Output: 4
Input: nums = [1] ‚Üí Output: 1
 
üÖ∞Ô∏è   // brute force approach

    let singleNumber = function(nums) {
        let hash = {};
        for (let i = 0; i < nums.length; i++) {
            if (!hash[nums[i]]) {
                hash[nums[i]] = 1;
            } else {
                hash[nums[i]]++;
            }
        }
        for (let i = 0; i < nums.length; i++) {
            if (hash[nums[i]] === 1) {
                return nums[i];
            }
        }
    };

    // optimized approach

    let singleNumber = function(nums) {
            let xor = 0;
            for (let i = 0; i < nums.length; i++) {
                xor = xor ^ nums[i];
            }
            return xor;
        };
--------------------------------------------------------------------------------------------------------------------------------------