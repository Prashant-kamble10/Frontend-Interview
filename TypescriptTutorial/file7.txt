15th - Interface vs Type

Interfaces in TypeScript are more than just object blueprints — they support extension, merging, and inheritance, 
making them powerful for modeling complex systems and working with external libraries.

🔑 Key Concepts Discussed

1. Reopening Interfaces:

You can declare an interface multiple times and add properties to it later (useful when working with third-party libraries).
Commonly referred to as interface augmentation or "reopening the interface" (even if it’s just syntactic sugar).

2. Interface Inheritance using extends:

Interfaces can extend other interfaces to reuse and combine structure.
Enables hierarchical modeling of data (e.g., Admin extends User).

3. Difference Between Interface vs Type (brief mention):

Interfaces can be reopened.
Types are static after declaration.
Inheritance in types uses &, whereas interfaces use extends.

// ✅ Step 1: Initial interface
interface User {
  email: string;
  userId: number;
  googleId?: string;
  readonly dbId: number;
  startTrial(): string;
}

// ✅ Step 2: Reopen (augment) interface to add new property
interface User {
  githubToken: string;
}

// ✅ Usage of the extended interface
const devUser: User = {
  email: "user@example.com",
  userId: 123,
  dbId: 456,
  githubToken: "gho_xxx123",
  startTrial: () => "Trial Started!",
};

// ✅ Step 3: Inherit interface using `extends`
interface Admin extends User {
  role: "admin" | "TA" | "learner";
}

// ✅ Admin object using inherited fields
const adminUser: Admin = {
  email: "admin@example.com",
  userId: 999,
  dbId: 111,
  githubToken: "gho_admin999",
  startTrial: () => "Admin Trial Started!",
  role: "admin", // must be one of the defined literal types
};

🧵 Cheat Sheet Summary

💡 Use `interface` for:
  - Object shapes
  - Class implementations
  - Declaration merging
  - Extending multiple object types cleanly

🧬 Use `type` for:
  - Primitives (type ID = string)
  - Tuples (type RGB = [number, number, number])
  - Unions (type Status = "success" | "fail")
  - Intersections (type Admin = User & Role)


  Feature	                   interface	                                   type

  Basic Syntax	               interface User { name: string }	              type User = { name: string }

  Extending/Inheritance	       extends keyword	                              & (intersection operator)

  Reopening/Declaration        ✅ Allowed (can add fields later)             ❌ Not allowed (once declared, fixed)
  Merging	

  Use for Objects	           Preferred for object shapes	                   Also fine

  Use for Primitives,          ❌ Not supported                               ✅ Can represent union, primitives, tuples
  Tuples, etc		

  Implements in Classes	       ✅ Classes can implement an interface	         ✅ Classes can implement types too (object shapes only)
  
------------------------------------------------------------------------------------------------------------------------------------
16th - private public in TS

🔑 Core Concepts Covered:
1. Access Modifiers (public and private):

public: Default in TypeScript. All properties/methods are public unless otherwise specified.
private: Restricts access within the class only. External access is not allowed.

2. JavaScript-style privacy (#) vs TypeScript-style (private):

#property is the native JavaScript way of marking a property private.
private property is TypeScript-specific and preferred for better readability and tooling support.

3. Constructor Parameter Shorthand:

You can define and initialize properties directly in the constructor parameters using public, private, or readonly.

4. Cleaner Syntax for Class Properties:

Professional codebases often use constructor shorthand to reduce boilerplate code.

❌ Traditional Verbose Way

class User {
  public email: string;
  public name: string;
  private city: string = "Mumbai";

  constructor(email: string, name: string) {
    this.email = email;
    this.name = name;
  }

  getCity() {
    return this.city;
  }
}


✅ Clean Constructor Shortcut (Professional Practice)

class User {
  constructor(
    public email: string,
    public name: string,
    private city: string = "Mumbai",
    private readonly userId: string
  ) {}

  getCity() {
    return this.city;
  }
}

🔒 Access Control Example

const user = new User("a@example.com", "Alice", "Delhi", "user123");

console.log(user.email);     // ✅ Allowed (public)
console.log(user.name);      // ✅ Allowed (public)
console.log(user.getCity()); // ✅ Allowed via method
// console.log(user.city);   // ❌ Error: Property 'city' is private
// user.userId = "newId";    // ❌ Error: userId is readonly

📌 Final Takeaway
Learn to use TypeScript’s access modifiers effectively with constructor shorthand to write clean, 
secure, and professional class-based code.
------------------------------------------------------------------------------------------------------------------------------------