ü§î for loop ? 

üÖ∞Ô∏è A for loop is a control structure in programming that allows you to execute a specific block of code repeatedly. It's especially useful when you want to perform the same task multiple times without duplicating your code. Let's break down the essential components of a for loop:

Initialization: You declare and initialize a variable that serves as a counter. This step only happens once at the beginning.
Condition: You specify a condition that determines when the loop should stop executing.
Increment/Decrement: You define how the counter variable changes after each iteration.
----------------------------------------------------------------------------------------------------------------------------------------------

ü§î Nested loop ?

üÖ∞Ô∏è Just like for loops, you can nest one for loop inside another. This concept becomes incredibly useful when you're working with multi-dimensional data structures like a 2-D Array or need to solve complex problems involving multiple iterations.

Example:-
 
for(let i=0; i <=3; i++){
    for(let j=1; j<=3; j++){
        console.log(`value of i =${i} & j=${j}`)
    }
}

value of i =0 & j=1
value of i =0 & j=2
value of i =0 & j=3
value of i =1 & j=1
value of i =1 & j=2
value of i =1 & j=3
value of i =2 & j=1
value of i =2 & j=2
value of i =2 & j=3
value of i =3 & j=1
value of i =3 & j=2
value of i =3 & j=3
----------------------------------------------------------------------------------------------------------------------------------------------
ü§î  while loop ?

üÖ∞Ô∏è A while loop is a control structure in programming that repeatedly executes a block of code as long as a specified condition remains true. A "while" loop will not execute the code at all if the initial condition is false. It relies on the condition being true from the outset for any code execution to occur.

Example:- 

let n = 5;
let factorial = 1

while(n > 0){

     factorial *= n;
    n--
}

console.log(factorial)    // 120

break: It allows you to exit the loop prematurely, even before the termination condition is met. For example, if you're searching for a value in an array, once you find it, you can break out of the loop instead of continuing to search through the remaining elements.

Example:- 

let arr =[1,2,3,4,5,6,7,8,9,10]
let target = 6;

for(let i=0; i < arr.length ;i++ ){
    if(arr[i] == target){
        break
    }else{
        console.log(arr[i])
    }
}

1
2
3
4
5

continue: It skips the current iteration of the loop and moves to the next one. This can be useful when you want to skip certain elements or avoid executing some code under specific conditions.

Example:-

let arr =[1,2,3,4,5,6,7,8,9,10]
let target = 6;

for(let i=0; i < arr.length ;i++ ){
    if(arr[i] % 2 == 0){
        continue;
    }else{
        console.log(arr[i])
    }
}

1
3
5
7
9

By using these control statements judiciously, you can reduce the number of iterations, which can significantly improve the efficiency of your algorithm.

The first loop uses break to exit the loop immediately when the target value is found, preventing unnecessary iterations.
The second loop uses continue to skip even numbers, so only odd numbers are printed, avoiding the execution of code for even numbers.
----------------------------------------------------------------------------------------------------------------------------------------------










