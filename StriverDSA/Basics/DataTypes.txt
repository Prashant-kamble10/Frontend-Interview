‚úÖ Primitive Data Types (Immutable)
String
Number
Boolean
Undefined
Null
Symbol
typeof 

‚úÖ Primitive Data Types
Immutable ‚úîÔ∏è
Once created, their value cannot be changed directly.
If you reassign, it creates a new value, not a change in the original.

Pass-by-value ‚úîÔ∏è
When you assign or pass a primitive, a copy of the value is used.
Changing the copy does not affect the original.

let a = 10;
let b = a;  // copy of value
b = 20;
console.log(a); // 10 ‚Äî original unchanged
----------------------------------------------------------------------------------------------------------------

‚úÖ Non-Primitive (Reference) Types
Object
Array - Special kind of object
Function - First-class objects in JS

‚úÖ Non-Primitive (Reference) Data Types
Mutable ‚úîÔ∏è
You can change properties or elements after creation.
Pass-by-reference ‚úîÔ∏è
When you assign or pass an object/array/function, you're assigning a reference to the original value.
Changing the reference does affect the original.

let arr1 = [1, 2, 3];
let arr2 = arr1;  // same reference
console.log("arr1", arr1)   // arr1 [ 1, 2, 3 ]
console.log("arr2", arr2)  // arr2 [ 1, 2, 3 ]
arr2.push(4);
console.log("arr1", arr1); // arr1 [1, 2, 3, 4] ‚Äî original changed
console.log("arr2", arr2)  // arr2 [ 1, 2, 3, 4 ]
----------------------------------------------------------------------------------------------------------------
ü§î DataTypes pass by value & pass by reference ?
üÖ∞Ô∏è  In JavaScript, primitive types (like numbers, strings, and booleans) are passed by value,
     while objects (including arrays and functions) are passed by reference.

Example:

function changeValue(x) {
    x = 10; // Modifying the copy
    console.log("Inside function:", x);
}

let num = 5;
console.log("Before function call:", num);    // Before function call: 5
changeValue(num);                             // Inside function: 10
console.log("After function call:", num);     After function call: 5

‚úÖ The original variable remains unchanged because num is passed by value.

Example:

function changeObject(obj) {
    obj.name = "Updated"; // Modifying the original object
}

let person = { name: "John" };
console.log("Before function call:", person.name);     // Before function call: John
changeObject(person);
console.log("After function call:", person.name);       // After function call: Updated


function modifyArray(arr) {
    arr.push(4); // Modifying the original array
}

let numbers = [1, 2, 3];
console.log("Before function call:", numbers);    // Before function call: [1, 2, 3]
modifyArray(numbers);
console.log("After function call:", numbers);     // After function call: [1, 2, 3, 4]

‚úÖ The original array is modified because arrays are also passed by reference.

‚ö†Ô∏è If you want to avoid modifying the original object, use the spread operator (...) or Object.assign() to pass a copy instead of the reference.
------------------------------------------------------------------------------------------------------------------------------------------------



