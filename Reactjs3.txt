Q. custom hooks ?

-------------------------------------------------------------------------------------------------------------------------------------
Q. cleaning cache, chunking, modularity, bundling ?

-------------------------------------------------------------------------------------------------------------------------------------
Q. lazy loading ?

-------------------------------------------------------------------------------------------------------------------------------------
Q. React test cases, JEST-TESTING ?

-------------------------------------------------------------------------------------------------------------------------------------
Q. tailwind css, bootstrap, daisy UI, material UI, bootstrap-react ?

-------------------------------------------------------------------------------------------------------------------------------------
Q. Higher order component ?

-------------------------------------------------------------------------------------------------------------------------------------
Q. Debugging tools, chrome dev tools ?

-------------------------------------------------------------------------------------------------------------------------------------
Q. how can child component can modify the state variable of parent components ?

-------------------------------------------------------------------------------------------------------------------------------------
Q. useContext, createContext, context-provider, user-context-consumer ?

-------------------------------------------------------------------------------------------------------------------------------------
Q. Redux, redux toolkit, Dispatch, slice, slicer, Action, Reducer, selector, subscribe, zustand ?

-------------------------------------------------------------------------------------------------------------------------------------
Q. useMemo ,useCallback, useRef ?

-------------------------------------------------------------------------------------------------------------------------------------
ü§î DangeourslySetHTML ?

üÖ∞Ô∏è WHAT is dangerouslySetInnerHTML?
    dangerouslySetInnerHTML is a React prop that allows you to directly inject raw HTML into a component.
    It is similar to innerHTML in vanilla JavaScript but comes with security risks.

    Example: Using dangerouslySetInnerHTML

    function MyComponent() {
        const htmlContent = "<h2 style='color:red;'>This is rendered as raw HTML</h2>";

        return <div dangerouslySetInnerHTML={{ __html: htmlContent }} />;
    }

    üìå This will render the HTML inside the <div> instead of treating it as a string.

    WHY Do We Need dangerouslySetInnerHTML?
    ‚úî Rendering HTML from External Sources ‚Äì Sometimes, data from APIs, CMS, or Markdown parsers contain HTML.
    ‚úî Displaying Pre-Formatted Content ‚Äì Blogs, email templates, or rich-text editors require HTML rendering.
    ‚úî SSR (Server-Side Rendering) or Pre-rendered Content ‚Äì Some applications require injecting raw HTML dynamically.

    HOW Does It Work?
    Instead of using {someHtmlString}, we use { __html: someHtmlString }.
    The double underscore (__html) is a deliberate design choice by React to highlight potential security risks.
-------------------------------------------------------------------------------------------------------------------------------------
Q. React Folder structure ?

-------------------------------------------------------------------------------------------------------------------------------------
Q. <React.strictmode /> ?

-------------------------------------------------------------------------------------------------------------------------------------


