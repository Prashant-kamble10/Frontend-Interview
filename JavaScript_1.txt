🤔 Execution context & call stack ?
🅰️  📌 Why (Why do we need Execution Context & Call Stack?)
        JavaScript is a single-threaded language, meaning it executes one operation at a time.
         To efficiently manage function execution and keep track of which function is currently running, 
         JavaScript uses Execution Context and Call Stack.
        Without them, JavaScript wouldn't know which function to execute next or how to maintain function scopes.

    📌 How (How does Execution Context & Call Stack work?)
            Execution Context
            When JavaScript executes a script, it creates an Execution Context to manage the execution of code.

            Each Execution Context has two phases:
            1️⃣ Creation Phase

                Creates the Variable Environment (stores variables & functions).
                Sets up the Lexical Environment (scopes & references).
                Sets this keyword based on the context.

            2️⃣ Execution Phase

                Assigns values to variables.
                Executes function calls & statements.

            Call Stack
            The Call Stack is a stack data structure that follows LIFO (Last In, First Out) to manage function execution.

            When a function is called, its Execution Context is pushed onto the Call Stack.
            When the function completes, it is popped off the stack.
            If a function calls another function, the new function’s Execution Context is pushed on top.

            Example : function first() {
                            console.log("First Function");
                            second();
                        }
                        function second() {
                            console.log("Second Function");
                            third();
                        }
                        function third() {
                            console.log("Third Function");
                        }
                        first();

            Call Stack Flow:

                first() is called → first Execution Context is pushed.
                Inside first(), second() is called → second Execution Context is pushed.
                Inside second(), third() is called → third Execution Context is pushed.
                third() completes → Removed from the stack.
                second() completes → Removed from the stack.
                first() completes → Removed from the stack.
                The stack is now empty.

    📌 What of execution context & call stack ?
    
    The Execution Context manages function execution (GEC, FEC).
    The Call Stack maintains the order of function calls.

    ⚠️ Edge Cases / Corner Cases

        Stack Overflow (Infinite Recursion)
        Asynchronous Functions & Call Stack : JavaScript uses the Event Loop & Callback Queue for asynchronous operations.
        Lexical Scope & Closures : Nested functions can retain access to outer function variables.
----------------------------------------------------------------------------------------------------------------------------
🤔 Hoisting var, let, const, temporal dead zone ?
 
🅰️ Hoisting:- By which you can access variable & functions even before you have initialized it or you have put some value in it,
                you can access it without any error.

                ✅ code snippet 1
                      var x = 7

                        function getName(){
                            console.log("Namaste Javascript")
                        }

                        getName()
                        console.log(x)    

                        output :
                        Namaste Javascript
                        7

                ✅ code snippet 2

                        getName()
                        console.log(x)

                        var x = 7

                        function getName(){
                            console.log("Namaste Javascript")
                        }

                          output :
                          Namaste Javascript
                          undefined

                ✅ code snippet 3

                          getName()
                          console.log(x)

                          function getName(){
                              console.log("Namaste Javascript")
                          }

                          output :
                          Namaste Javascript
                          ReferenceError: x is not defined

                ✅ code snippet 4

                          var x = 7

                            function getName(){
                                console.log("Namaste Javascript")
                            }

                            console.log(getName)

                            or 

                              console.log(getName)

                              var x = 7

                              function getName(){
                                  console.log("Namaste Javascript")
                              }


                            output :
                            ƒ getName(){
                                  console.log("Namaste Javascript")
                              }



                ✅ code snippet 5

                              getName()
                              console.log(x)
                              console.log(getName)

                              var x = 7

                              function getName(){
                                  console.log("Namaste Javascript")
                              }

                               output :
                               Namaste Javascript
                                undefined
                                ƒ getName(){
                                  console.log("Namaste Javascript")
                              }


                ✅ code snippet 6

                                  getName()
                                  console.log(x)
                                  console.log(getName)

                                  var x = 7

                                  var getName = ()=> {   
                                      console.log("Namaste Javascript")
                                  }

                                   output :
                                   TypeError: getName is not a function
                                   Reason = In this getName is arrow function, so here it behaves like a variable,
                                            so in memory creation getName = undefined 

                ✅ code snippet 7

                                  getName()
                                  console.log(x)
                                  console.log(getName)

                                  var x = 7

                                  var getName = function() {   
                                      console.log("Namaste Javascript")
                                  }

                                  output :
                                   TypeError: getName is not a function
                                   Reason = In this getName is arrow function, so here it behaves like a variable,
                                            so in memory creation getName = undefined 

                ✅ code snippet 8

                                    getName()
                                    console.log(x)
                                    console.log(getName)

                                    var x = 7

                                    function getName() {
                                        console.log("Namaste Javascript")
                                    }

                                    output :
                                    Namaste Javascript
                                    undefined
                                    ƒ getName(){
                                        console.log("Namaste Javascript")
                                    }

                ✅ code snippet 9
                                  
                                  var name = "vinod"
                                  console.log(name)      // vinod

                                  let name = "bahadur"
                                  console.log(name)      // bahadur

                                  const name = "thapa"
                                  console.log(name)      // thapa

                ✅ code snippet 10
                                  
                                  var name = "vinod"
                                  var name = "thapa"
                                  console.log(name)      // thapa

                                  let name = "vinod"
                                  let name = "thapa"
                                  console.log(name)      // SyntaxError: Identifier 'name' has already been declared
                                  // you can declare the same variable using "let" more than once in the same scope

                                   let name = "vinod"
                                  name = "thapa"
                                  console.log(name)       // thapa

                                  const name = "vinod"
                                  const name = "thapa"
                                  console.log(name)       // SyntaxError: Identifier 'name' has already been declared

                                  const name = "vinod"
                                   name = "thapa"
                                  console.log(name)       // TypeError: Assignment to constant variable.

                ✅ code snippet 11

                                  function modJS(love){
                                    if(love){
                                        let name = "vinod"
                                        const sname = "thapa"
                                        console.log(name + sname)     // vinodthapa
                                    }                                  
                                  }
                                  
                                  modJS(true)


                                  function modJS(love){
                                    if(love){
                                        var name = "vinod"
                                        var sname = "thapa"
                                        console.log(name + sname)     // vinodthapa
                                    }                                  
                                  }
                                  
                                  modJS(true)


                                  function modJS(love){
                                    if(love){
                                        var name = "vinod"
                                        var sname = "thapa"                                        
                                    }      
                                    console.log(name + sname)     // vinodthapa                            
                                  }
                                  
                                  modJS(true)


                                  function modJS(love){
                                    if(love){
                                        let name = "vinod"
                                        const sname = "thapa"                                        
                                    }      
                                    console.log(name + sname)     // ReferenceError: name is not defined                           
                                  }
                                  
                                  modJS(true)

                ✅ code snippet 12

                                  var whoWins = "India"

                                    if(true){
                                        var whoWins = "NZ"
                                        console.log(whoWins)       // NZ
                                    }
                                    console.log(whoWins)            // NZ


                                  let whoWins = "India"

                                    if(true){
                                        let whoWins = "NZ"
                                        console.log(whoWins)       // NZ
                                    }
                                    console.log(whoWins)            // India


                                  const whoWins = "India"

                                    if(true){
                                        const whoWins = "NZ"
                                        console.log(whoWins)       // NZ
                                    }
                                    console.log(whoWins)            // India

                  ✅ code snippet 13

                                    console.log(b)        // undefined
                                      let a = 100
                                      var b = 100

                                    console.log(a)        // ReferenceError: Cannot access 'a' before initialization
                                      let a = 100
                                      var b = 100
                                    
                                      let a = 100
                                      console.log(a)        // 100
                                      var b = 100

  Temporal Dead Zone = is the time since when this, let a / const xyz was hoisted & till it is initialised same value.
                          time btn both of this id known as "temporal dead zone"

                          whenever you access a variable in temporal dead zone it throws "Reference error"

                          both, let a & var b memory was allocated but var b was attached to global object,
                          let a & const xyz they are also allocated memory & that is what is called Hoisting,
                          but, they are stored in diff memory space & you cannot access this memory space before you
                          have put any value in them/ Initialised/ decalred. 
                                
                 ✅ code snippet 14

                                    console.log(x)      // ReferenceError: x is not defined
                                    let a = 100
                                    var b = 100

                                    let a = 10
                                    let a = 100
                                    console.log(a)      // SyntaxError: Identifier 'a' has already been declared

                                    let a = 10
                                    let a = 100
                                    console.log(a)      // SyntaxError: Identifier 'a' has already been declared
                                    
                                    let a = 10
                                     a = 100
                                    console.log(a)      // 100

                                   let a = 10
                                    var b =  100
                                    var b = 1000
                                    console.log(b)     // 1000

                                    let a                    -> declare
                                    const b =  100
                                    a = 1000                  -> Initialize
                                    console.log(a)      // 1000

                                    const b;
                                    b = 1000
                                    console.log(b)     // SyntaxError: Missing initializer in const declaration

                                    const b = 10
                                    b = 1000
                                    console.log(b)    // TypeError: Assignment to constant variable.

                                    const b = 1000
                                    console.log(b)     // 1000

                  ✅ code snippet 15
                                    {
                                      var a = 10;  // a hoisted in global space
                                      let b = 20;  // b & c are hoisted in different memory space
                                      const c =30
                                      
                                      console.log(a)      // 10
                                      console.log(b)      // 20
                                      console.log(c)      // 30
                                  }

                                  console.log(a)      // 10
                                  console.log(b)      ReferenceError: b is not defined
                                  console.log(c)  

                  ✅ code snippet 16  (shadowing in JS)

                                    var a = 100; (both var a, are pointing to same global scope)
                                      {
                                          var a = 10;
                                          let b = 20;
                                          const c = 30;
                                          console.log(a)      // 10
                                      }
                                      console.log(a)          // 10

                                      let b = 100;     // here b has a script scope
                                          {
                                              var a = 10;    //  here a has global scope
                                              let b = 20;    // here b has block scope
                                              const c = 30;  // here c has block scope
                                              console.log(b)    // 20
                                          }
                                          console.log(b)      // 100

                                      const c = 100;
                                            {
                                                var a = 10;
                                                let b = 20;
                                                const c = 30;
                                                console.log(c)    // 30
                                            }
                                            console.log(c)        // 100


                                        const c = 100;
                                            function x(){
                                                const c = 30
                                                console.log(c)    // 30
                                            }

                                            x()
                                            console.log(c)          // 100

                    ✅ code snippet 16  (illegal shadowing in JS)

                                        var a = 20
                                        {
                                          var a = 20   ✅
                                        }


                                        let a = 20
                                        {
                                          var a = 20   ❌  // syntax error : Identifier a is already been declared.
                                          var crossing this block scope interfying with let, var is always attached to 
                                          global scope, no matter where it is declare & also var is a function scope.
                                        }

                                        let a = 20
                                        function x(){
                                          var a = 20          ✅
                                        }

                                        let a = 20;
                                        {
                                          let a = 20;         ✅
                                        }


                                        var a = 20;
                                        {
                                          let a = 20;         ✅
                                        }

                      ✅ code snippet 17

                                        const a = 20
                                            {
                                                const a = 100
                                                {
                                                    const a = 200
                                                    console.log(a)    // 200
                                                }
                                            }
                                      

                                      const a = 20
                                            {
                                                const a = 100
                                                {
                                                    const a = 200
                                                    
                                                }
                                                console.log(a)          // 100
                                            }


                                      const a = 20
                                            {
                                                const a = 100
                                                {
                                                    console.log(a)          // 100    
                                                }         
                                            }

                                       const a = 20
                                            {
                                                const a = 100
                                                {
                                                    const a = 200
                                                }
                                            }
                                                console.log(a)         // 20

----------------------------------------------------------------------------------------------------------------------------
Q. Window & this keyword ?

Book through hoil
----------------------------------------------------------------------------------------------------------------------------
🤔 undefined vs not defined vs null ?
🅰️   📌 why ?
        JavaScript has multiple ways to represent missing or uninitialized values,
        and understanding the differences between them helps in debugging and avoiding runtime errors. 
        Using the wrong type can lead to unexpected behaviors.

    📌 how ?
        ✅undefined
        A variable is declared but not assigned a value.
        Functions without a return statement return undefined by default.
        Accessing an object property that doesn’t exist returns undefined.

        ✅not defined
        A variable is not declared at all.
        Accessing a variable that has never been declared will throw a ReferenceError.

        ✅null
        null is an explicit assignment to indicate "no value".
        It must be manually assigned to a variable.
        Often used to reset a variable or indicate missing values in databases.

        🔥 Edge Cases / Corner Cases

            console.log(typeof undefined); // "undefined"
            console.log(typeof null); // "object" (historical JS bug)
            console.log(typeof x); // "undefined" (if declared but uninitialized)
            console.log(typeof notDeclaredVariable); // "undefined" (no ReferenceError)

            The reason typeof notDeclaredVariable returns "undefined" instead of throwing a ReferenceError is due to ECMAScript specification design.
            This behavior was intentionally introduced to make JavaScript more fault-tolerant.

            Early versions of JavaScript needed fault tolerance

            In early JavaScript implementations, encountering an undeclared variable would have caused a crash.
            Allowing typeof to return "undefined" instead of throwing an error prevented unnecessary runtime failures.

            console.log(typeof undeclaredVar); // ✅ "undefined"
            console.log(undeclaredVar); // ❌ ReferenceError: undeclaredVar is not defined



            console.log(null == undefined); // true (loose equality)
            Because JavaScript considers them both "empty" values and treats them as equal in loose comparisons.
            console.log(null === undefined); // false (strict equality)
            console.log(null == false); // false
            console.log(undefined == false); // false
            console.log(null == 0); // false
            console.log(undefined == 0); // false

            JSON.stringify({ a: null, b: undefined });    // '{"a":null}' (undefined is removed!)
           

----------------------------------------------------------------------------------------------------------------------------
🤔 scope, scope chain, lexical env ?

🅰️  Scope : means you can access a specific variable or function in our code.
     Scope chain : chain of lexcial env & parent references
     lexcial env : local memory + reference to the lexical Environment

     pak <- Ind  (Inside out value searching, OK)✅
     pak -> Ind  (Outside In value searching, Not OK)❌

     ✅ code snippet 1

                  function a(){
                        console.log(b)     // 10
                    }

                    var b = 10
                    a()

      ✅ code snippet 2

                    var b = 10
                      function a(){
                          var x = 100
                          
                      }
                      console.log(b)      // 10
                      console.log(x)      // ReferenceError: x is not defined
                      a()

       ✅ code snippet 3

                          function a(){
                              c()
                              function c(){
                                  console.log(b)   // 10
                              }
                              
                          }
                          var b = 10
                          a()

       ✅ code snippet 4

                          function a(){
                            var b = 10
                              c()
                              function c(){
                                  console.log(b)   // 10
                              }
                              
                          }
                          
                          a()
          
       ✅ code snippet 5

                          function a(){
                            var b = 10
                              c()
                              function c(){
                                  
                              }
                              
                          }
                          
                          a()
                          console.log(b)   // ReferenceError: b is not defined
          
----------------------------------------------------------------------------------------------------------------------------
🤔 function scope, block scope, global scope ?

🅰️  var is function scoped
    let & const is block scoped

    In JavaScript, variables have three types of scope: Global Scope, Function Scope, and Block Scope. 
    Global variables can be accessed anywhere, Function Scope means a variable is accessible only inside a function, 
    and Block Scope applies to variables declared inside {} using let or const.

    Edge Case: If a global variable is declared using var, it will be added to the window object in browsers.
    Edge Case: If a variable is declared with var inside a function, it will still have function scope but will 
                not be block-scoped inside loops or conditionals.
    

      var inside a block still has function scope, not block scope
          function test() {
          if (true) {
              var x = 10;
          }
          console.log(x); // ✅ Works! (Function Scoped)
          }
          test();


      let and const respect block scope
            function test() {
            if (true) {
                let y = 20;
            }
            console.log(y); // ❌ ReferenceError: y is not defined
        }
        test();
----------------------------------------------------------------------------------------------------------------------------
🤔 Difference  between closure and scope ?
🅰️  ✅ Scope:
        Scope determines where variables are accessible in your code. It defines the lifetime and visibility of a variable.
        Global Scope → Variables declared outside any function are accessible everywhere.
        Function Scope → Variables declared inside a function are only accessible within that function.
        Block Scope (Introduced with let & const) → Variables inside {} blocks are limited to that block.

    ✅ Closure:
        A closure is a function that remembers the variables from its parent scope, even after the parent function has executed.
        Closures help in data encapsulation and creating private variables.
        It allows functions to maintain state between executions.

    🔥 Edge Cases / Corner Cases
         🔹   Edge Case 1: Closure Retaining Stale Data, Issue: Each instance of createCounter() has its own closure.

                    function createCounter() {
                    let count = 0;
                    return function () {
                        count++;
                        return count;
                    };
                    }

                const counter1 = createCounter();
                const counter2 = createCounter();

                console.log(counter1()); // 1 (same closure share state)
                console.log(counter1()); // 2

                console.log(counter2()); // 1 (Separate closure, doesn't share state)

          🔹 Edge Case 2: Loop with var in Closures

                    for (var i = 0; i < 3; i++) {
                        setTimeout(() => console.log(i), 1000);
                    }

                    3
                    3
                    3
         
                    Because var is function-scoped, so the final value of i (which is 3) is used for all closures.


          
----------------------------------------------------------------------------------------------------------------------------
Q. closures, closures with setTimeout, setInterval, Tust Issues with setTimeout ?

Book through hoil

----------------------------------------------------------------------------------------------------------------------------
🤔 Normal function vs arrow function ?

🅰️    ✅ code snippet 1  (normal function/ function statement/ function declaration)
            a()   ✅
           function a(){
                console.log("a called")
            }

      ✅ code snippet 2  (arrow function/ function expression/ function acts like a value)

              b()      ❌
              var b = function(){
                    console.log("b callled")      // TypeError: b is not a function 
                }

              ba()     ❌
              var ba = ()=>{
                  console.log("b callled")
              }

              

        Difference btn code snippet 1 & 2 is "Hoisting", code snippet 2 behave like a variable having a value.
        see the function calling position in both the code snippet.
----------------------------------------------------------------------------------------------------------------------------
🤔. types of function ?
🅰️  🔴Void function: functions which does not return anything, they just display value.
     🔴anonymous Function

        eg: function(){
                  
                }

    🔴first class function (eg: shown in respective question )
    🔴call back function  (eg: shown in respective question )
    🔴Higher order function  (eg: shown in respective question )
    🔴arrow function (eg: shown in respective question )
    🔴pure function  (eg: shown in respective question )
    🔴function statement == function declaration (eg: shown in respective question )
    🔴function expression (eg: shown in respective question )
    🔴Named function expression

        eg: var b = function xyz(){
                    console.log("function called")
                }

                b()
                xyz()    // ReferenceError: xyz is not defined


        eg: var b = function xyz(){
                    console.log(xyz)     // ƒ xyz(){
                                         //  console.log(xyz)
                                         //    }
                  }

                 b() 



----------------------------------------------------------------------------------------------------------------------------
Q. How many ways you can pass arguments to the functions ?

-----------------------------------------------------------------------------------------------------------------------------
Q. How to use default parameters in function ?

------------------------------------------------------------------------------------------------------------------------------
Q. pure vs Impure function ?

------------------------------------------------------------------------------------------------------------------------------
Q. first class function ?

Book through hoil

----------------------------------------------------------------------------------------------------------------------------
Q. callback function ?


Book through hoil
----------------------------------------------------------------------------------------------------------------------------
Q. Higher order function ?

Book through hoil
----------------------------------------------------------------------------------------------------------------------------
Q. map, reduce, filter ?

Book through hoil
----------------------------------------------------------------------------------------------------------------------------
Q. IIFE ?

----------------------------------------------------------------------------------------------------------------------------
Q. Currying function ?

----------------------------------------------------------------------------------------------------------------------------
Q. callback hell ?

----------------------------------------------------------------------------------------------------------------------------
Q. Promises, promises stage/state ?

----------------------------------------------------------------------------------------------------------------------------
Q. promise chain ?

----------------------------------------------------------------------------------------------------------------------------
🤔 Promise API ?

🅰️      let myPromise = new Promise((resolve, reject)=>{

        let success =  true;

        console.log("before promise")
        setTimeout(()=>{
            if(success){
                resolve("operation succesfully")
                console.log("In promise")
            }else{
                reject("operation failed")
            }
        }, 5000)

        console.log("After promise")
        })

        myPromise.then((result) => console.log(result))      // operation succesfully
        .catch((error)=> console.log(error))                 // operation failed

        // PROGRAM FLOW :-

        // before promise
        // After promise
        // operation successfull

        // Async/Await is Better for simplicity and Readablility: If you are working with asynchronous code that involves sequential operation,
         async/await id generally the preferred approach because it makes the code look like its synchronous (which is easier to follow and debug)

        // Promise are useful for parallelism and complex flows: If you're dealing with multiple asynchronous operation that don't depend on each other
         (or need to run in parallel), Promises and methods like Promise.all() or Promise.race() are label.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
🤔 async await ?

🅰️  let myPromise = new Promise((resolve, reject) => {

        let success = true;

        setTimeout(() => {
          if (success) {
            resolve("operation successfull");
          } else {
            reject("operation failed");
          }
        }, 5000);
      });

      myPromise
        .then((result) => console.log(result)) // "operation successfull"
        .catch((error) => console.log(error)); // operation failed

      async function asyncFunction() {
        try {
          console.log("Before async await");

          let result = await myPromise; //  waits for the promise to resolve or reject
          console.log("After1 async await");
          console.log(result); // operation successfull
          console.log("After2 async await");
        } catch (error) {
          console.log(error); // operation failed
        }
      }

      asyncFunction();

      // PROGRAM FLOW:
      
      // before async await
      // operation successfull
      // After1 async await
      // operation successfull
      // After2 async await

      // Async/Await is Better for simplicity and Readablility: If you are working with asynchronous code that involves sequential operation,
       async/await id generally the preferred approach because it makes the code look like its synchronous (which is easier to follow and debug)

      // Promise are useful for parallelism and complex flows: If you're dealing with multiple asynchronous operation that don't 
      depend on each other (or need to run in parallel), Promises and methods like Promise.all() or Promise.race() are label.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------