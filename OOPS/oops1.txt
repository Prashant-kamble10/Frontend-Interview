ðŸŸ¢ 1. Introduction to OOP

ðŸ§  1.1 What is Object-Oriented Programming (OOP)?

    OOP is a programming paradigm where we organize code using objects â€” like real-world entities. 
    Think of it as creating "blueprints" (classes) for things (objects) that have "properties" (data) and "methods" (actions/behavior).

    ðŸŽ¬ Wasseypur Analogy: Letâ€™s say you want to code the whole Wasseypur storyline. Now instead of writing everything chaotically, you define:
    Characters = Objects (e.g., Sardar Khan, Faizal Khan, Ramadhir Singh)
    Each character has properties (name, age, gang, enemy) and methods (attack(), betray(), smoke())

    You're organizing all this complex behavior into bite-sized reusable objects. Thatâ€™s the essence of OOP.

    ðŸ’¡ JavaScript Example: javascript

    let sardarKhan = {
        name: "Sardar Khan",
        gang: "Khan Gang", 
        attack()
        { console.log(${this.name} is attacking with katta!); }
            };

    sardarKhan.attack(); // Sardar Khan is attacking with katta!
----------------------------------------------------------------------------------------------------------------------------------------------------------------

ðŸ§  1.2 Why use OOP in JavaScript?

    Because it makes your code:

    Organized (grouped logic in one place)
    Reusable (create multiple characters from one blueprint)
    Scalable (add new features without rewriting everything)
    Easier to debug and maintain

    ðŸŽ¬ Wasseypur Analogy: Letâ€™s say youâ€™ve coded Sardar Khan. Now Faizal Khan has the same base traits but with a twist â€” more weed, less patience ðŸ˜Ž

    Using OOP, you can reuse the Character "class" and extend/customize it. Like kaandiyon ka legacy passing on.
----------------------------------------------------------------------------------------------------------------------------------------------------------------
ðŸ§  1.3 OOP vs Functional Programming

OOP = focuses on objects and their interactions
Functional = focuses on pure functions and data transformation (no side effects)

ðŸŽ¬ Wasseypur Analogy: Letâ€™s say:

OOP is like Ramadhir Singh running his empire with proper hierarchy, roles, and loyal workers (objects) doing specific jobs.
Functional is like Definite Khanâ€”solo assassin, no attachments, comes in, kills, exits. Very pure. No baggage, no shared state.

ðŸ’¬ Code-wise:

OOP style:
    class GangMember { 
        constructor(name) { 
            this.name = name; 
            } 
            shoot() {
                console.log(${this.name} shoots! ðŸ’¥); } 
                }

    const definite = new GangMember("Definite Khan"); 
    definite.shoot();

Functional style: 
    function shoot(name) { 
        console.log(${name} shoots! ðŸ’¥); 
        }

    shoot("Definite Khan");
----------------------------------------------------------------------------------------------------------------------------------------------------------------

