🧠 9.1 Mixins in JavaScript
        (Sharing reusable functionality between unrelated classes)

        🎬 Analogy:
        Faizal Khan + Sultan = Ek deadly combo ban jaaye agar dono ke best skills combine ho jaayein 💥
        That's mixin — ek object ke paas doosre ka talent bhi aajaata hai!

        💻 Code:

        const shooter = {
             shoot() {
                 console.log("Goli maar diye 🔫"); 
                 }, 
            };

        const driver = { 
            drive() { 
                console.log("Gaadi chala rahe hain 🚗");
                 }, 
            };

        class Faizal {

        }

        Object.assign(Faizal.prototype, shooter, driver);

        const bhai = new Faizal();
        
         bhai.shoot(); // Goli maar diye 🔫 
         bhai.drive(); // Gaadi chala rahe hain 🚗

        Mixins allow you to "mix" multiple behaviors into one class/object.
----------------------------------------------------------------------------------------------------------------------------------------------------------------    
🧠 9.2 Composition vs Inheritance

        Inheritance: "Is-a" relationship
        Composition: "Has-a" relationship

        🎬 Analogy:
        Inheritance: Faizal is a Don (inherits from Don class)
        Composition: Faizal has a gun, has a car, has a gang — alag-alag cheezein jodi gayi

        💻 Inheritance example:

        class Don { 
            rule() { 
                console.log("Ruling area 🗺️"); 
                } 
            }

        class Faizal extends Don {

        }

        new Faizal().rule(); // Ruling area 🗺️

        💻 Composition example:

        function createFaizal() { 
            return { ...shooter, ...driver, name: "Faizal Khan", }; 
            }

        const faizal = createFaizal(); 
        faizal.shoot(); // Goli maar diye 🔫 
        faizal.drive(); // Gaadi chala rahe hain 🚗

        Composition gives you more flexibility. You can pick and choose abilities.
----------------------------------------------------------------------------------------------------------------------------------------------------------------  
🧠 9.3 Method Chaining

Ek ke baad ek method ko chain karna.

🎬 Analogy:
Faizal orders → Load guns → Take gang → Attack — sab steps chained hote hain 🎯

💻 Code:

class GangOperation { 
    loadGuns() { 
        console.log("Guns loaded 🔫");
         return this;
      }

gatherMen() { 
    console.log("Gang ready 🧑‍🤝‍🧑");
    return this; 
    }

attack() {
     console.log("Attack launched 💣");
      return this; 
      } 
    }

new GangOperation().loadGuns().gatherMen().attack();

🧠 return this; is the trick to chaining methods
----------------------------------------------------------------------------------------------------------------------------------------------------------------  
🧠 9.4 Using Symbols for true private properties

        Symbol creates unique property keys that are nearly inaccessible

        🎬 Analogy:
        Soch Faizal ne locker banwaya jiska chabi code hi kisi ko nahi pata — Symbol acts like that hidden key 🔐

        💻 Code:

        const secretKey = Symbol("secret");

        class Don { 
            constructor() {
                this[secretKey] = "RDX Plan 💣";
            }

            revealSecret() { 
                console.log(this[secretKey]); 
                } 
            }

            const faizal = new Don(); 
            faizal.revealSecret(); // RDX Plan 💣 
            console.log(faizal.secret); // undefined 
            console.log(Object.keys(faizal)); // doesn't show secret

            Symbol makes it very hard to access the property from outside.
----------------------------------------------------------------------------------------------------------------------------------------------------------------  
🧠 9.5 Object.create for pure prototypal inheritance

        Directly create object with a prototype — no class, no constructor needed.

        🎬 Analogy:
        Tiwari ji ne bola — Sardar Khan ki copy chahiye bas uske jaise chalti hai aur gussa bhi waise hi 😡

        💻 Code:

        const don = { 
            rule() {
                console.log("Don ruling Dhanbad 🔥"); 
                }, 
            };

        const miniDon = Object.create(don); 
        miniDon.rule(); // Don ruling Dhanbad 🔥

        console.log(Object.getPrototypeOf(miniDon) === don); // true

        Object.create is the cleanest way to use prototypal inheritance without classes or functions.
----------------------------------------------------------------------------------------------------------------------------------------------------------------  
📦 Final Recap: Advanced Concepts 📘


Topic	                        Summary	                                        Analogy
Mixins	                        Add features from multiple sources	            Faizal + Sultan ka combo 🧬
Composition vs Inheritance	    Compose from parts vs inherit from one	        Has-a vs Is-a
Method Chaining	                Call multiple methods in one go	                Faizal’s step-by-step mission 🔗
Symbols	                        Unique keys for private data	                Hidden locker key 🔐
Object.create	                Direct prototype-based object	                Don ke clone ko create kar diya 👻
----------------------------------------------------------------------------------------------------------------------------------------------------------------  
