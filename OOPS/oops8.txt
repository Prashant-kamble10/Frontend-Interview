the 4 Core Pillars of OOP! These are like the 4 gang leaders of Wasseypur — each powerful in their own zone, 
but together they run the full game.

🧠 8.1 Encapsulation
        (Hiding data using closures or private fields)

        Data ko directly access karne se roka jaata hai — sirf allowed methods se access karo. Ye safety layer hai.

        🎬 Analogy:
        Faizal ke paas har cheez ka backup plan tha, par sabko nahi pata tha uske plan ke andar kya chal raha hai — sirf kaam dikhta tha!

        💻 Code: Using closures

        function GunFactory() { 
            let secretGun = "AK47"; // private variable

            return { 
                getGun: function () {
                     return secretGun;
                      }, 
                    }; 
                }

        const factory = GunFactory();

        console.log(factory.getGun()); // AK47 
        console.log(factory.secretGun); // undefined ❌

        💻 Code: Using private fields (ES2022+)

        class Don {
            #secretPlan = "Rule Dhanbad"; // private field

            revealPlan() {
                 return this.#secretPlan; 
                 } 
            }

        const sardar = new Don();
         console.log(sardar.revealPlan()); // Rule Dhanbad
         console.log(sardar.#secretPlan); // ❌ SyntaxError
----------------------------------------------------------------------------------------------------------------------------------------------------------------
🧠 8.2 Abstraction ?

            Abstraction ka matlab hota hai:
            "User ko sirf important cheez dikhana, baaki complex logic chhupa lena."

            Matlab kaam toh ho raha hai, lekin kaise ho raha hai — wo user ko nahi dikhate.
            ━━━━━━━━━━━━━━━━━━━━━━━
            🎬 Analogy from Gangs of Wasseypur:

            Soch, Sultan ne kisi se weapons supply karwaaye. Ab jo banda goli chalata hai, usse yeh nahi pata ki:
            Weapon kaha se aaya?
            Black mein kharida ya smuggled?
            Kya rate laga?
            Usko sirf trigger dabana hai 🔫

            👉 That's abstraction:
            "Trigger press karo — kaise goli chalti hai wo chhupa rehta hai!"
            ━━━━━━━━━━━━━━━━━━━━━━━

            💻 JavaScript Example:

            class Gun { 
                fire() { 
                    this.#loadBullet();
                    this.#pullTrigger();
                    console.log("Bang! 🔫");
                    }

                #loadBullet() {
                    console.log("Bullet loaded 🧨"); 
                    }

                #pullTrigger() { 
                    console.log("Trigger pulled 🚀"); 
                    } 
            }

            const weapon = new Gun(); 
            weapon.fire(); // Output: // Bullet loaded 🧨 // Trigger pulled 🚀 // Bang! 🔫

            weapon.#loadBullet(); // ❌ Error: Private method 
            weapon.#pullTrigger(); // ❌ Error: Private method

            💡 Yahaan abstraction ka magic yeh hai:

            Banda sirf fire() method call karega
            Andar bullet load kaise ho rahi hai, trigger kaise dab raha hai — sab hidden 🔐

            ━━━━━━━━━━━━━━━━━━━━━━━
            📦 Real Life Code Examples:

            ATM Machine 🏧
            ➤ You press withdraw ₹500
            ➤ ATM doesn't show you how network calls happen or how balance checks happen — sirf result dikhata hai
            ➤ That’s abstraction.

            car.startEngine() 🚗
            ➤ Engine kaise ignite ho raha hai, fuel flow ho raha hai — sab hidden
            ➤ Bas button dabao, kaam ho gaya.

            ━━━━━━━━━━━━━━━━━━━━━━━
            🧾 Recap in Ek Line:

            🔍 Abstraction = Sirf "kya kaam ho raha hai" dikhana, "kaise ho raha hai" chhupana.
            Tu bas goli chala, gun ka mechanism mere pe chhod de — That’s pure JavaScript Abstraction 🔫

----------------------------------------------------------------------------------------------------------------------------------------------------------------
🧠 8.3 Inheritance
            (Sharing functionality across classes)

            Child classes inherit features of parent classes. Koi kaam dubara likhne ki zarurat nahi.

            🎬 Analogy:
            Faizal inherited weapons, contacts, aur gussa from Sardar Khan. Ek hi family, next level ka kaam 🔥

            💻 Code:

            class GangLeader { 
                ruleArea() {
                    console.log("Controlling the area 🗺️");
                    } 
                    }

            class Faizal extends GangLeader {
                ownStyle() { 
                    console.log("Silent shooter 😎");
                    } 
                    }

            const newDon = new Faizal();
            newDon.ruleArea(); // Controlling the area 🗺️ 
            newDon.ownStyle(); // Silent shooter 😎

----------------------------------------------------------------------------------------------------------------------------------------------------------------
🧠 8.4 Polymorphism
        (Same method name, different implementations)

         Ek hi naam ke method, lekin har class mein apna alag style. Overriding ka yeh advanced form hai.

        🎬 Analogy:
        Sab log “goli maarte” hai, lekin Faizal style alag, Sultan style alag!

        💻 Code:

        class Don {
             attack() {
                 console.log("Don throws bombs 💣");
                  } 
                }

        class Faizal extends Don {
             attack() { 
                console.log("Faizal fires silently 🔫");
                 } 
            }

        class Sultan extends Don {
             attack() { 
                console.log("Sultan attacks openly 🪓");
                 }
             }

        const dons = [new Don(), new Faizal(), new Sultan()]; 
        dons.forEach((d) => d.attack());

        /* Output: Don throws bombs 💣 Faizal fires silently 🔫 Sultan attacks openly 🪓 */
----------------------------------------------------------------------------------------------------------------------------------------------------------------    

📌 Recap Table: OOP ke 4 Gangster Pillars 💪

Pillar	                              Purpose	                                Analogy in Wasseypur
Encapsulation	                      Hide internal data	                    Faizal's hidden plans
Abstraction	                          Show only necessary parts	                Operation visible, process hidden
Inheritance	                          Share features between classes	        Gaddi transfer from Sardar to Faizal
Polymorphism	                      Same method, different behavior	        Each Don attacks in own style
---------------------------------------------------------------------------------------------------------------------------------------------------------------- 