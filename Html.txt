ü§î meta tags ?

üÖ∞Ô∏è Why Meta Tags?
    Meta tags in HTML are essential for providing metadata about a webpage.
     They help search engines understand the page's content, improve SEO (Search Engine Optimization), 
     and control how the page is displayed in search results or social media previews.

    How Do Meta Tags Work?
    Meta tags are placed inside the <head> section of an HTML document. 
    They do not appear on the webpage but provide crucial information to browsers, search engines,
     and social media platforms. 
    They use the <meta> element with attributes like name, content, and charset.

    What Are Meta Tags?
    Meta tags are HTML elements that define metadata for a webpage. Some common meta tags include:

    Charset Meta Tag <meta charset="UTF-8">
    Viewport Meta Tag <meta name="viewport" content="width=device-width, initial-scale=1.0">
    Description Meta Tag <meta name="description" content="This is a sample webpage about HTML meta tags.">
    Keywords Meta Tag <meta name="keywords" content="HTML, meta tags, SEO, web development">
    Author Meta Tag  <meta name="author" content="John Doe">

----------------------------------------------------------------------------------------------------------------------------
ü§î semantic tags ?

üÖ∞Ô∏è Why Semantic Tags?
    Semantic tags were introduced in HTML5 to improve the readability and structure of web pages. Before HTML5, 
    developers used <div> and <span> for everything, making it hard to understand the page‚Äôs content.

    Better Readability: Code is more understandable for developers.
    SEO Friendly: Search engines can interpret page content more accurately

    How Do Semantic Tags Work?
    Semantic tags describe the purpose of the content inside them.

    Unlike <div> (which is generic), semantic elements clearly indicate their meaning.
    Browsers and search engines process them differently to improve accessibility and SEO.
    Example: Instead of using <div class="header">, use <header>.

    What Are Semantic Tags?
    Semantic tags convey meaning about their content. Some common semantic tags include:

    Tag	            Purpose
    <header>	    Represents the header of a webpage or section.
    <nav>	        Defines a navigation menu.
    <section>	    Groups related content.
    <article>	    Represents an independent piece of content.
    <aside>	        Contains additional information (like sidebars).
    <footer>	    Defines the footer of a page or section.
    <figure>	    Groups media content like images, videos, or captions.
    <main>	        Defines the primary content of a webpage.
    <mark>	        Highlights important text.

----------------------------------------------------------------------------------------------------------------------------
ü§î Difference between HTML & XHTML ?

üÖ∞Ô∏è Why Was XHTML Introduced?
    HTML (HyperText Markup Language) was widely used but was not strict about syntax, leading to inconsistent webpages.
    XHTML (Extensible HyperText Markup Language) was introduced as a stricter, XML-compliant version of HTML.
    It ensures better structure, consistency, and compatibility with other XML-based applications.

    How Does XHTML Differ from HTML?
    XHTML follows stricter rules than HTML.
    It is case-sensitive, requires well-formed code, and needs proper closing of tags.

    HTML (Allowed) <img src="image.jpg">
    
    XHTML (Strict, Requires Closing Tag)  <img src="image.jpg" />

    What Is the Difference Between HTML & XHTML?
    | Feature	            | HTML	                                         | XHTML
    | Syntax	            | Less strict, allows errors	                 | Strict syntax, must be well-formed
    | Tag                 | Closing	Some tags can be left open (<br>)	     | All tags must be closed (<br />)
    | Case Sensitivity	 | Not case-sensitive (<TITLE> = <title>)	         | Case-sensitive (<title> is correct, <TITLE> is wrong)
    | Attribute Values	| Can be unquoted (<input type=text>)	             | Must be quoted (<input type="text" />)
    | Attribute Names	    | Can be uppercase (<INPUT>)	                 | Must be lowercase (<input>)
    | Document Type	    | Uses <!DOCTYPE HTML>	                             | Uses <!DOCTYPE XHTML> and must follow XML rules
----------------------------------------------------------------------------------------------------------------------------
ü§î How does HTML DOM  model work ?

üÖ∞Ô∏è Why Do We Need the HTML DOM?
    HTML is static by itself. To make it interactive and dynamic, we need a way to access and modify elements in a structured way.
    The DOM (Document Object Model) allows JavaScript to dynamically access, update, and manipulate HTML and CSS on a webpage.
    Example: When clicking a button changes text color, JavaScript modifies the DOM dynamically.

    How Does the HTML DOM Model Work?
    The DOM represents an HTML document as a tree structure, where each element is a node.

    Types of Nodes in the DOM:
    Document Node ‚Äì Represents the entire webpage (document object in JS).
    Element Nodes ‚Äì Represents HTML elements like <div>, <h1>, etc.
    Text Nodes ‚Äì Represents text inside elements.
    Attribute Nodes ‚Äì Represents element attributes (id, class, etc.).
    Comment Nodes ‚Äì Represents comments inside HTML.

    Example: HTML Structure ‚Üí DOM Representation

            <!DOCTYPE html>
        <html>
        <head>
            <title>DOM Example</title>
        </head>
        <body>
            <h1 id="heading">Hello, DOM!</h1>
            <button onclick="changeText()">Click Me</button>

            <script>
                function changeText() {
                    document.getElementById("heading").innerText = "DOM Updated!";
                }
            </script>
        </body>
        </html>

        Document
        ‚îú‚îÄ‚îÄ html
        ‚îÇ   ‚îú‚îÄ‚îÄ head
        ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ title ‚Üí "DOM Example"
        ‚îÇ   ‚îú‚îÄ‚îÄ body
        ‚îÇ       ‚îú‚îÄ‚îÄ h1 (id="heading") ‚Üí "Hello, DOM!"
        ‚îÇ       ‚îú‚îÄ‚îÄ button (onclick="changeText()") ‚Üí "Click Me"
        ‚îÇ       ‚îú‚îÄ‚îÄ script ‚Üí JavaScript code


        What Is the HTML DOM?
        The HTML DOM is an API that allows JavaScript to interact with HTML.
        It treats everything as an object, providing methods to access and modify elements.

        Method	                                      |      Description
        document.getElementById("id")	              |  Selects an element by ID.
        document.getElementsByClassName("class")	  |  Selects elements by class name.
        document.getElementsByTagName("tag")	      |  Selects elements by tag name.
        document.querySelector("selector")	          |  Selects the first matching element (CSS selector).
        document.querySelectorAll("selector")	      |  Selects all matching elements (CSS selector).
        element.innerHTML	                          |  Gets/sets the HTML content of an element.
        element.innerText	                          |  Gets/sets the text content of an element.
        element.style.property	                      |  Modifies CSS properties dynamically.
        element.setAttribute("attr", "value")	      |  Modifies attributes of an element.
        element.addEventListener("event", function)	  |  Attaches event listeners (click, keypress, etc.).

----------------------------------------------------------------------------------------------------------------------------
ü§î custom data attributes ?

üÖ∞Ô∏è Why Do We Need Custom Data Attributes?
    HTML elements don‚Äôt store extra custom data by default.
    Developers often need to attach additional metadata to elements without affecting their appearance or behavior.
    Custom data attributes allow us to store custom data inside HTML elements, which can be easily accessed using JavaScript.

    How Do Custom Data Attributes Work?
    Custom data attributes must start with data-.
    The attribute name should be lowercase and hyphen-separated (e.g., data-user-id, data-item-name).
    These attributes do not affect the element‚Äôs default behavior.

    Example:    <button id="buyBtn" data-product-id="123" data-price="500">
                    Buy Now
                    </button>

                    Use the .dataset property to retrieve values.

                    let button = document.getElementById("buyBtn");

                    // Accessing custom data attributes
                    console.log(button.dataset.productId); // Output: "123"
                    console.log(button.dataset.price); // Output: "500"

                    // Modifying a custom data attribute
                    button.dataset.price = "550"; 
                    console.log(button.dataset.price); // Output: "550"

    What Are Custom Data Attributes?
    Custom attributes allow developers to store extra information within HTML elements.
    They do not affect rendering and are accessible using JavaScript.
    These attributes help in scenarios where storing additional metadata in JavaScript objects might not be ideal.

    ‚ö†Ô∏è Edge cases: 1. Custom attributes store only strings.
                    2. HTML attributes are case-insensitive, but JavaScript‚Äôs .dataset converts them to camelCase.

                    <div id="box" data-user-name="Alice"></div>

                    let box = document.getElementById("box");
                    console.log(box.dataset.userName); // Correct ‚úÖ
                    console.log(box.dataset.user-name); // Incorrect ‚ùå (Syntax Error)

                    3. Problem: If data- attributes hold sensitive information, they can be accessed using document.querySelector().

----------------------------------------------------------------------------------------------------------------------------
ü§î Lazy loading in HTML ?

üÖ∞Ô∏è What is Lazy Loading?
    Lazy loading is an optimization technique in web development that defers the loading of non-essential resources 
    (like images, iframes, and scripts) until they are needed. Instead of loading all images when a page initially loads, 
    lazy loading loads them only when they are about to be visible in the viewport.

    Why is Lazy Loading Important?
    Lazy loading improves performance and user experience by:
    ‚úÖ Reducing Initial Load Time ‚Äì The browser doesn‚Äôt load unnecessary resources upfront.
    ‚úÖ Improving Page Speed & SEO ‚Äì Faster load times positively impact Core Web Vitals and search rankings.
    ‚úÖ Reducing Bandwidth Usage ‚Äì Saves network resources, especially useful for users on slow or limited connections.
    ‚úÖ Enhancing User Experience ‚Äì Users don‚Äôt wait for offscreen images to load immediately.

    How to Implement Lazy Loading in HTML?
    ‚úÖ For Images (Using loading="lazy" Attribute)
    The simplest way is by adding the loading="lazy" attribute to <img> and <iframe> elements.

    <img src="large-image.jpg" alt="Example" loading="lazy" />

    For Iframes (e.g., Embedding YouTube Videos)

    <iframe src="https://www.youtube.com/embed/example" loading="lazy"></iframe>

----------------------------------------------------------------------------------------------------------------------------
ü§î Difference between <div> and <section> ?

üÖ∞Ô∏è What is the Difference Between <div> and <section>?
| Feature	            | <div> (Division)	                                         | <section> (Semantic Section)
| Definition	        |A generic container for styling/layout.	                 | A semantic grouping of related content.
| Purpose              | Used for styling & layout                                 | Used for structuring content meaningfully.
| Semantic Meaning     | No inherent meaning. It does not indicate content type.   |Has meaning ‚Äì represents a standalone content section.
|SEO & Accessibility   |Not SEO-friendly ‚Äì search engines and screen               | SEO-friendly ‚Äì search engines recognize it as a content block.
                        readers don‚Äôt interpret it.
| When to Use?          | When no semantic meaning is needed.                | When content is thematically grouped (like blog sections, FAQ, etc.).


    Why is the Difference Important?
     ‚úÖ SEO & Accessibility

    <section> is more SEO-friendly because it helps search engines understand the page structure.
    Screen readers recognize <section> as a meaningful content block.
    <div> is only presentational and does not improve accessibility.
    ‚úÖ Better Code Organization

    Using <section> makes HTML more readable and structured.
    <div> is useful for styling but can lead to div soup (excessive nested <div> elements).
    ‚úÖ Maintainability & Scalability

    <section> improves long-term maintainability by providing clear sections of a webpage.
    <div> makes sense for small layout elements, not for structuring large content blocks.
    
     How to Use <div> and <section> ?

          ‚úÖ   <div class="card">
                <h2>Title</h2>
                <p>Some text content.</p>
                </div>

          ‚ùå  <div>
                <h2>Blog Posts</h2>
                <article>
                    <h3>Post 1</h3>
                    <p>Content of the post.</p>
                </article>
                </div>

            ‚úÖ   <section>
                    <h2>Blog Posts</h2>
                    <article>
                        <h3>Post 1</h3>
                        <p>Content of the post.</p>
                    </article>
                </section>
----------------------------------------------------------------------------------------------------------------------------
ü§î defer attribute work in a <script> How is it Difference from async ?

üÖ∞Ô∏è Refer this image  https://i.sstatic.net/pI1Wn.png

    What is the async Attribute in <script>?
    The async attribute ensures that a script is downloaded in parallel with HTML parsing and executed immediately when available 
    (without waiting for DOM parsing to complete).
    
    <script src="script.js" async></script>

    What is the defer Attribute in <script>?
    The defer attribute ensures that a script is downloaded in parallel with the HTML parsing but waits until the entire HTML document 
    is parsed before execution.

    <script src="script.js" defer></script>

    Why Does This Difference Matter?
    ‚úÖ When to Use defer?

    When the script depends on the DOM being fully loaded (e.g., modifying elements in document.body).
    When maintaining execution order of multiple scripts is crucial.
    For better performance without blocking page rendering.
    ‚úÖ When to Use async?

    When the script is independent of the DOM (e.g., analytics, ads, tracking scripts).
    When the script doesn't depend on other scripts.
    When you need fast execution without waiting for HTML parsing.


----------------------------------------------------------------------------------------------------------------------------
ü§î Different types of Input Element ?

üÖ∞Ô∏è <input type="text" placeholder="Enter your name">
    <input type="password">
    <input type="email">   Validates email format
    <input type="search">  Optimized for search queries
    <input type="tel">     Accepts telephone numbers
    <input type="url">    Validates a URL input

    <input type="number" min="1" max="100">  Accepts only numeric input
    <input type="range" min="0" max="100">   Creates a slider input

    <input type="date">               Selects a date
    <input type="datetime-local">    	Selects date and time (without timezone)
    <input type="time">               Selects a time
    <input type="month">                Selects a month & year
    <input type="week">                Selects a week & year

    <input type="radio" name="gender" value="male"> Male
    <input type="checkbox" name="hobby" value="sports"> Sports

    <input type="file">
    <input type="image" src="submit.png">

    <input type="button" value="Click Me">
    <input type="submit" value="Submit">      Submits form data
    <input type="reset" value="Reset">         Resets form fields

----------------------------------------------------------------------------------------------------------------------------
ü§î Different ways to include external resources (css, JS) in HTML ?

üÖ∞Ô∏è  Including CSS in HTML

    ‚úÖExternal CSS (Best Practice)
        <head>
            <link rel="stylesheet" href="styles.css">
        </head>

    ‚úÖ Internal CSS (Embedded)
        <head>
            <style>
                body {
                    background-color: lightgray;
                }
            </style>
        </head>

    ‚úÖ Inline CSS (Avoid for Large Projects)
        <p style="color: red; font-size: 20px;">This is an inline styled paragraph.</p>

    Including JavaScript in HTML

    ‚úÖ  External JavaScript (Best Practice)
            <head>
                <script src="script.js" defer></script>
            </head>

    ‚úÖ  Internal JavaScript (Embedded)
            <script>
                console.log("Hello, world!");
            </script>

    ‚úÖ   Inline JavaScript (Not Recommended)
            <button onclick="alert('Button Clicked!')">Click Me</button>

    üìå Place <script> at the end of <body> or use defer to prevent render-blocking.


----------------------------------------------------------------------------------------------------------------------------
ü§î <head> <body> <main> ?

üÖ∞Ô∏è <head> | Contains metadata, styles, and scripts  | Helps SEO, performance, and external resources of(css&JS)
   <body> | Holds all visible elements              | Displays content, handles user interactions
   <main> | Wraps the primary content of the page   | Boosts SEO, improves accessibility
----------------------------------------------------------------------------------------------------------------------------
ü§î Difference between action, method attributes of a <form> tag ?

üÖ∞Ô∏è üìåaction Attribute
    What is it?
    The action attribute specifies the URL (or endpoint) where the form data should be sent after submission.

    <form action="https://example.com/submit" method="post">
        <input type="text" name="username">
        <button type="submit">Submit</button>
    </form>

    üìåmethod Attribute
    What is it?
    The method attribute specifies how the form data should be sent to the server. It accepts two main values:

    GET ‚Üí Sends data in the URL query string.
    POST ‚Üí Sends data in the request body.

    <form action="search.php" method="get">
        <input type="text" name="query" placeholder="Search...">
        <button type="submit">Search</button>
    </form>

----------------------------------------------------------------------------------------------------------------------------
ü§î <no script> tag ?

üÖ∞Ô∏è The <noscript> tag in HTML is used to define alternative content that is displayed only
     when JavaScript is disabled or not supported in a user‚Äôs browser.

     If JavaScript is enabled, content inside <noscript> is ignored.

     Why is <noscript> Important?
    ‚úÖ Better User Experience ‚Äì Ensures users without JavaScript still see important content.
    ‚úÖ SEO & Accessibility ‚Äì Search engines and screen readers may benefit from fallback content.
    ‚úÖ Security Awareness ‚Äì Some users disable JavaScript for security reasons, so they should still access key information.

<noscript>
    <p>Your browser does not support JavaScript or it is disabled. Please enable JavaScript for a better experience.</p>
</noscript>

----------------------------------------------------------------------------------------------------------------------------
ü§î Difference between id & class attributes ?

 üÖ∞Ô∏è id is a unique identifier for a single element.
    class is used to group multiple elements that share the same styling or behavior.

    üìåid has higher specificity than class.
    üìåclass has lower specificity, overridden by id.

    ‚ÄúIn HTML, both id and class are used to identify and style elements, but they serve different purposes.

    The id attribute is unique and can be used to target a specific element for styling or JavaScript manipulation.
    The class attribute is reusable and allows multiple elements to share the same styles and behavior.

----------------------------------------------------------------------------------------------------------------------------
ü§î DangeourslySetHTML ?

üÖ∞Ô∏è  WHAT is dangerouslySetInnerHTML?
    dangerouslySetInnerHTML is a React prop that allows you to directly inject raw HTML into a component.
    It is similar to innerHTML in vanilla JavaScript but comes with security risks.

    Example: Using dangerouslySetInnerHTML

    function MyComponent() {
        const htmlContent = "<h2 style='color:red;'>This is rendered as raw HTML</h2>";

        return <div dangerouslySetInnerHTML={{ __html: htmlContent }} />;
    }

    üìå This will render the HTML inside the <div> instead of treating it as a string.

    WHY Do We Need dangerouslySetInnerHTML?
    ‚úî Rendering HTML from External Sources ‚Äì Sometimes, data from APIs, CMS, or Markdown parsers contain HTML.
    ‚úî Displaying Pre-Formatted Content ‚Äì Blogs, email templates, or rich-text editors require HTML rendering.
    ‚úî SSR (Server-Side Rendering) or Pre-rendered Content ‚Äì Some applications require injecting raw HTML dynamically.

    HOW Does It Work?
    Instead of using {someHtmlString}, we use { __html: someHtmlString }.
    The double underscore (__html) is a deliberate design choice by React to highlight potential security risks.
----------------------------------------------------------------------------------------------------------------------------